// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: prescription/v1/prescription.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPrescriptionCancelPrescription = "/api.prescription.v1.Prescription/CancelPrescription"
const OperationPrescriptionCheckDrugInteractions = "/api.prescription.v1.Prescription/CheckDrugInteractions"
const OperationPrescriptionConfirmPrescription = "/api.prescription.v1.Prescription/ConfirmPrescription"
const OperationPrescriptionCreatePrescription = "/api.prescription.v1.Prescription/CreatePrescription"
const OperationPrescriptionGetPrescription = "/api.prescription.v1.Prescription/GetPrescription"
const OperationPrescriptionListPrescriptions = "/api.prescription.v1.Prescription/ListPrescriptions"
const OperationPrescriptionSearchMedicines = "/api.prescription.v1.Prescription/SearchMedicines"
const OperationPrescriptionUpdatePrescription = "/api.prescription.v1.Prescription/UpdatePrescription"

type PrescriptionHTTPServer interface {
	// CancelPrescription Cancel prescription
	CancelPrescription(context.Context, *CancelPrescriptionReq) (*CancelPrescriptionResp, error)
	// CheckDrugInteractions Check drug interactions
	CheckDrugInteractions(context.Context, *CheckDrugInteractionsReq) (*CheckDrugInteractionsResp, error)
	// ConfirmPrescription Confirm prescription
	ConfirmPrescription(context.Context, *ConfirmPrescriptionReq) (*ConfirmPrescriptionResp, error)
	// CreatePrescription Create prescription
	CreatePrescription(context.Context, *CreatePrescriptionReq) (*CreatePrescriptionResp, error)
	// GetPrescription Get prescription details
	GetPrescription(context.Context, *GetPrescriptionReq) (*GetPrescriptionResp, error)
	// ListPrescriptions List prescriptions
	ListPrescriptions(context.Context, *ListPrescriptionsReq) (*ListPrescriptionsResp, error)
	// SearchMedicines Search medicines
	SearchMedicines(context.Context, *SearchMedicinesReq) (*SearchMedicinesResp, error)
	// UpdatePrescription Update prescription
	UpdatePrescription(context.Context, *UpdatePrescriptionReq) (*UpdatePrescriptionResp, error)
}

func RegisterPrescriptionHTTPServer(s *http.Server, srv PrescriptionHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/prescription/create", _Prescription_CreatePrescription0_HTTP_Handler(srv))
	r.PUT("/api/v1/prescription/{prescription_id}", _Prescription_UpdatePrescription0_HTTP_Handler(srv))
	r.POST("/api/v1/prescription/{prescription_id}/confirm", _Prescription_ConfirmPrescription0_HTTP_Handler(srv))
	r.POST("/api/v1/prescription/{prescription_id}/cancel", _Prescription_CancelPrescription0_HTTP_Handler(srv))
	r.GET("/api/v1/prescription/{prescription_id}", _Prescription_GetPrescription0_HTTP_Handler(srv))
	r.GET("/api/v1/prescriptions", _Prescription_ListPrescriptions0_HTTP_Handler(srv))
	r.GET("/api/v1/medicines/search", _Prescription_SearchMedicines0_HTTP_Handler(srv))
	r.POST("/api/v1/medicines/check-interactions", _Prescription_CheckDrugInteractions0_HTTP_Handler(srv))
}

func _Prescription_CreatePrescription0_HTTP_Handler(srv PrescriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePrescriptionReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrescriptionCreatePrescription)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePrescription(ctx, req.(*CreatePrescriptionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePrescriptionResp)
		return ctx.Result(200, reply)
	}
}

func _Prescription_UpdatePrescription0_HTTP_Handler(srv PrescriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePrescriptionReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrescriptionUpdatePrescription)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePrescription(ctx, req.(*UpdatePrescriptionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePrescriptionResp)
		return ctx.Result(200, reply)
	}
}

func _Prescription_ConfirmPrescription0_HTTP_Handler(srv PrescriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConfirmPrescriptionReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrescriptionConfirmPrescription)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConfirmPrescription(ctx, req.(*ConfirmPrescriptionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConfirmPrescriptionResp)
		return ctx.Result(200, reply)
	}
}

func _Prescription_CancelPrescription0_HTTP_Handler(srv PrescriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelPrescriptionReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrescriptionCancelPrescription)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelPrescription(ctx, req.(*CancelPrescriptionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelPrescriptionResp)
		return ctx.Result(200, reply)
	}
}

func _Prescription_GetPrescription0_HTTP_Handler(srv PrescriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPrescriptionReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrescriptionGetPrescription)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPrescription(ctx, req.(*GetPrescriptionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPrescriptionResp)
		return ctx.Result(200, reply)
	}
}

func _Prescription_ListPrescriptions0_HTTP_Handler(srv PrescriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPrescriptionsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrescriptionListPrescriptions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPrescriptions(ctx, req.(*ListPrescriptionsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPrescriptionsResp)
		return ctx.Result(200, reply)
	}
}

func _Prescription_SearchMedicines0_HTTP_Handler(srv PrescriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchMedicinesReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrescriptionSearchMedicines)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchMedicines(ctx, req.(*SearchMedicinesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchMedicinesResp)
		return ctx.Result(200, reply)
	}
}

func _Prescription_CheckDrugInteractions0_HTTP_Handler(srv PrescriptionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckDrugInteractionsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrescriptionCheckDrugInteractions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckDrugInteractions(ctx, req.(*CheckDrugInteractionsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckDrugInteractionsResp)
		return ctx.Result(200, reply)
	}
}

type PrescriptionHTTPClient interface {
	CancelPrescription(ctx context.Context, req *CancelPrescriptionReq, opts ...http.CallOption) (rsp *CancelPrescriptionResp, err error)
	CheckDrugInteractions(ctx context.Context, req *CheckDrugInteractionsReq, opts ...http.CallOption) (rsp *CheckDrugInteractionsResp, err error)
	ConfirmPrescription(ctx context.Context, req *ConfirmPrescriptionReq, opts ...http.CallOption) (rsp *ConfirmPrescriptionResp, err error)
	CreatePrescription(ctx context.Context, req *CreatePrescriptionReq, opts ...http.CallOption) (rsp *CreatePrescriptionResp, err error)
	GetPrescription(ctx context.Context, req *GetPrescriptionReq, opts ...http.CallOption) (rsp *GetPrescriptionResp, err error)
	ListPrescriptions(ctx context.Context, req *ListPrescriptionsReq, opts ...http.CallOption) (rsp *ListPrescriptionsResp, err error)
	SearchMedicines(ctx context.Context, req *SearchMedicinesReq, opts ...http.CallOption) (rsp *SearchMedicinesResp, err error)
	UpdatePrescription(ctx context.Context, req *UpdatePrescriptionReq, opts ...http.CallOption) (rsp *UpdatePrescriptionResp, err error)
}

type PrescriptionHTTPClientImpl struct {
	cc *http.Client
}

func NewPrescriptionHTTPClient(client *http.Client) PrescriptionHTTPClient {
	return &PrescriptionHTTPClientImpl{client}
}

func (c *PrescriptionHTTPClientImpl) CancelPrescription(ctx context.Context, in *CancelPrescriptionReq, opts ...http.CallOption) (*CancelPrescriptionResp, error) {
	var out CancelPrescriptionResp
	pattern := "/api/v1/prescription/{prescription_id}/cancel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPrescriptionCancelPrescription))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrescriptionHTTPClientImpl) CheckDrugInteractions(ctx context.Context, in *CheckDrugInteractionsReq, opts ...http.CallOption) (*CheckDrugInteractionsResp, error) {
	var out CheckDrugInteractionsResp
	pattern := "/api/v1/medicines/check-interactions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPrescriptionCheckDrugInteractions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrescriptionHTTPClientImpl) ConfirmPrescription(ctx context.Context, in *ConfirmPrescriptionReq, opts ...http.CallOption) (*ConfirmPrescriptionResp, error) {
	var out ConfirmPrescriptionResp
	pattern := "/api/v1/prescription/{prescription_id}/confirm"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPrescriptionConfirmPrescription))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrescriptionHTTPClientImpl) CreatePrescription(ctx context.Context, in *CreatePrescriptionReq, opts ...http.CallOption) (*CreatePrescriptionResp, error) {
	var out CreatePrescriptionResp
	pattern := "/api/v1/prescription/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPrescriptionCreatePrescription))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrescriptionHTTPClientImpl) GetPrescription(ctx context.Context, in *GetPrescriptionReq, opts ...http.CallOption) (*GetPrescriptionResp, error) {
	var out GetPrescriptionResp
	pattern := "/api/v1/prescription/{prescription_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPrescriptionGetPrescription))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrescriptionHTTPClientImpl) ListPrescriptions(ctx context.Context, in *ListPrescriptionsReq, opts ...http.CallOption) (*ListPrescriptionsResp, error) {
	var out ListPrescriptionsResp
	pattern := "/api/v1/prescriptions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPrescriptionListPrescriptions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrescriptionHTTPClientImpl) SearchMedicines(ctx context.Context, in *SearchMedicinesReq, opts ...http.CallOption) (*SearchMedicinesResp, error) {
	var out SearchMedicinesResp
	pattern := "/api/v1/medicines/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPrescriptionSearchMedicines))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrescriptionHTTPClientImpl) UpdatePrescription(ctx context.Context, in *UpdatePrescriptionReq, opts ...http.CallOption) (*UpdatePrescriptionResp, error) {
	var out UpdatePrescriptionResp
	pattern := "/api/v1/prescription/{prescription_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPrescriptionUpdatePrescription))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
