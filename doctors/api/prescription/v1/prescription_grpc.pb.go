// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: prescription/v1/prescription.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Prescription_CreatePrescription_FullMethodName    = "/api.prescription.v1.Prescription/CreatePrescription"
	Prescription_UpdatePrescription_FullMethodName    = "/api.prescription.v1.Prescription/UpdatePrescription"
	Prescription_ConfirmPrescription_FullMethodName   = "/api.prescription.v1.Prescription/ConfirmPrescription"
	Prescription_CancelPrescription_FullMethodName    = "/api.prescription.v1.Prescription/CancelPrescription"
	Prescription_GetPrescription_FullMethodName       = "/api.prescription.v1.Prescription/GetPrescription"
	Prescription_ListPrescriptions_FullMethodName     = "/api.prescription.v1.Prescription/ListPrescriptions"
	Prescription_SearchMedicines_FullMethodName       = "/api.prescription.v1.Prescription/SearchMedicines"
	Prescription_CheckDrugInteractions_FullMethodName = "/api.prescription.v1.Prescription/CheckDrugInteractions"
)

// PrescriptionClient is the client API for Prescription service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Prescription management service
type PrescriptionClient interface {
	// Create prescription
	CreatePrescription(ctx context.Context, in *CreatePrescriptionReq, opts ...grpc.CallOption) (*CreatePrescriptionResp, error)
	// Update prescription
	UpdatePrescription(ctx context.Context, in *UpdatePrescriptionReq, opts ...grpc.CallOption) (*UpdatePrescriptionResp, error)
	// Confirm prescription
	ConfirmPrescription(ctx context.Context, in *ConfirmPrescriptionReq, opts ...grpc.CallOption) (*ConfirmPrescriptionResp, error)
	// Cancel prescription
	CancelPrescription(ctx context.Context, in *CancelPrescriptionReq, opts ...grpc.CallOption) (*CancelPrescriptionResp, error)
	// Get prescription details
	GetPrescription(ctx context.Context, in *GetPrescriptionReq, opts ...grpc.CallOption) (*GetPrescriptionResp, error)
	// List prescriptions
	ListPrescriptions(ctx context.Context, in *ListPrescriptionsReq, opts ...grpc.CallOption) (*ListPrescriptionsResp, error)
	// Search medicines
	SearchMedicines(ctx context.Context, in *SearchMedicinesReq, opts ...grpc.CallOption) (*SearchMedicinesResp, error)
	// Check drug interactions
	CheckDrugInteractions(ctx context.Context, in *CheckDrugInteractionsReq, opts ...grpc.CallOption) (*CheckDrugInteractionsResp, error)
}

type prescriptionClient struct {
	cc grpc.ClientConnInterface
}

func NewPrescriptionClient(cc grpc.ClientConnInterface) PrescriptionClient {
	return &prescriptionClient{cc}
}

func (c *prescriptionClient) CreatePrescription(ctx context.Context, in *CreatePrescriptionReq, opts ...grpc.CallOption) (*CreatePrescriptionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePrescriptionResp)
	err := c.cc.Invoke(ctx, Prescription_CreatePrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prescriptionClient) UpdatePrescription(ctx context.Context, in *UpdatePrescriptionReq, opts ...grpc.CallOption) (*UpdatePrescriptionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePrescriptionResp)
	err := c.cc.Invoke(ctx, Prescription_UpdatePrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prescriptionClient) ConfirmPrescription(ctx context.Context, in *ConfirmPrescriptionReq, opts ...grpc.CallOption) (*ConfirmPrescriptionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmPrescriptionResp)
	err := c.cc.Invoke(ctx, Prescription_ConfirmPrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prescriptionClient) CancelPrescription(ctx context.Context, in *CancelPrescriptionReq, opts ...grpc.CallOption) (*CancelPrescriptionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelPrescriptionResp)
	err := c.cc.Invoke(ctx, Prescription_CancelPrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prescriptionClient) GetPrescription(ctx context.Context, in *GetPrescriptionReq, opts ...grpc.CallOption) (*GetPrescriptionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPrescriptionResp)
	err := c.cc.Invoke(ctx, Prescription_GetPrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prescriptionClient) ListPrescriptions(ctx context.Context, in *ListPrescriptionsReq, opts ...grpc.CallOption) (*ListPrescriptionsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrescriptionsResp)
	err := c.cc.Invoke(ctx, Prescription_ListPrescriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prescriptionClient) SearchMedicines(ctx context.Context, in *SearchMedicinesReq, opts ...grpc.CallOption) (*SearchMedicinesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchMedicinesResp)
	err := c.cc.Invoke(ctx, Prescription_SearchMedicines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prescriptionClient) CheckDrugInteractions(ctx context.Context, in *CheckDrugInteractionsReq, opts ...grpc.CallOption) (*CheckDrugInteractionsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckDrugInteractionsResp)
	err := c.cc.Invoke(ctx, Prescription_CheckDrugInteractions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrescriptionServer is the server API for Prescription service.
// All implementations must embed UnimplementedPrescriptionServer
// for forward compatibility.
//
// Prescription management service
type PrescriptionServer interface {
	// Create prescription
	CreatePrescription(context.Context, *CreatePrescriptionReq) (*CreatePrescriptionResp, error)
	// Update prescription
	UpdatePrescription(context.Context, *UpdatePrescriptionReq) (*UpdatePrescriptionResp, error)
	// Confirm prescription
	ConfirmPrescription(context.Context, *ConfirmPrescriptionReq) (*ConfirmPrescriptionResp, error)
	// Cancel prescription
	CancelPrescription(context.Context, *CancelPrescriptionReq) (*CancelPrescriptionResp, error)
	// Get prescription details
	GetPrescription(context.Context, *GetPrescriptionReq) (*GetPrescriptionResp, error)
	// List prescriptions
	ListPrescriptions(context.Context, *ListPrescriptionsReq) (*ListPrescriptionsResp, error)
	// Search medicines
	SearchMedicines(context.Context, *SearchMedicinesReq) (*SearchMedicinesResp, error)
	// Check drug interactions
	CheckDrugInteractions(context.Context, *CheckDrugInteractionsReq) (*CheckDrugInteractionsResp, error)
	mustEmbedUnimplementedPrescriptionServer()
}

// UnimplementedPrescriptionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPrescriptionServer struct{}

func (UnimplementedPrescriptionServer) CreatePrescription(context.Context, *CreatePrescriptionReq) (*CreatePrescriptionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrescription not implemented")
}
func (UnimplementedPrescriptionServer) UpdatePrescription(context.Context, *UpdatePrescriptionReq) (*UpdatePrescriptionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrescription not implemented")
}
func (UnimplementedPrescriptionServer) ConfirmPrescription(context.Context, *ConfirmPrescriptionReq) (*ConfirmPrescriptionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmPrescription not implemented")
}
func (UnimplementedPrescriptionServer) CancelPrescription(context.Context, *CancelPrescriptionReq) (*CancelPrescriptionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPrescription not implemented")
}
func (UnimplementedPrescriptionServer) GetPrescription(context.Context, *GetPrescriptionReq) (*GetPrescriptionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrescription not implemented")
}
func (UnimplementedPrescriptionServer) ListPrescriptions(context.Context, *ListPrescriptionsReq) (*ListPrescriptionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrescriptions not implemented")
}
func (UnimplementedPrescriptionServer) SearchMedicines(context.Context, *SearchMedicinesReq) (*SearchMedicinesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMedicines not implemented")
}
func (UnimplementedPrescriptionServer) CheckDrugInteractions(context.Context, *CheckDrugInteractionsReq) (*CheckDrugInteractionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDrugInteractions not implemented")
}
func (UnimplementedPrescriptionServer) mustEmbedUnimplementedPrescriptionServer() {}
func (UnimplementedPrescriptionServer) testEmbeddedByValue()                      {}

// UnsafePrescriptionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrescriptionServer will
// result in compilation errors.
type UnsafePrescriptionServer interface {
	mustEmbedUnimplementedPrescriptionServer()
}

func RegisterPrescriptionServer(s grpc.ServiceRegistrar, srv PrescriptionServer) {
	// If the following call pancis, it indicates UnimplementedPrescriptionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Prescription_ServiceDesc, srv)
}

func _Prescription_CreatePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrescriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrescriptionServer).CreatePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prescription_CreatePrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrescriptionServer).CreatePrescription(ctx, req.(*CreatePrescriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prescription_UpdatePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrescriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrescriptionServer).UpdatePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prescription_UpdatePrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrescriptionServer).UpdatePrescription(ctx, req.(*UpdatePrescriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prescription_ConfirmPrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmPrescriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrescriptionServer).ConfirmPrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prescription_ConfirmPrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrescriptionServer).ConfirmPrescription(ctx, req.(*ConfirmPrescriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prescription_CancelPrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPrescriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrescriptionServer).CancelPrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prescription_CancelPrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrescriptionServer).CancelPrescription(ctx, req.(*CancelPrescriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prescription_GetPrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrescriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrescriptionServer).GetPrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prescription_GetPrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrescriptionServer).GetPrescription(ctx, req.(*GetPrescriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prescription_ListPrescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrescriptionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrescriptionServer).ListPrescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prescription_ListPrescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrescriptionServer).ListPrescriptions(ctx, req.(*ListPrescriptionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prescription_SearchMedicines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMedicinesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrescriptionServer).SearchMedicines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prescription_SearchMedicines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrescriptionServer).SearchMedicines(ctx, req.(*SearchMedicinesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prescription_CheckDrugInteractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDrugInteractionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrescriptionServer).CheckDrugInteractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prescription_CheckDrugInteractions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrescriptionServer).CheckDrugInteractions(ctx, req.(*CheckDrugInteractionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Prescription_ServiceDesc is the grpc.ServiceDesc for Prescription service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Prescription_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.prescription.v1.Prescription",
	HandlerType: (*PrescriptionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePrescription",
			Handler:    _Prescription_CreatePrescription_Handler,
		},
		{
			MethodName: "UpdatePrescription",
			Handler:    _Prescription_UpdatePrescription_Handler,
		},
		{
			MethodName: "ConfirmPrescription",
			Handler:    _Prescription_ConfirmPrescription_Handler,
		},
		{
			MethodName: "CancelPrescription",
			Handler:    _Prescription_CancelPrescription_Handler,
		},
		{
			MethodName: "GetPrescription",
			Handler:    _Prescription_GetPrescription_Handler,
		},
		{
			MethodName: "ListPrescriptions",
			Handler:    _Prescription_ListPrescriptions_Handler,
		},
		{
			MethodName: "SearchMedicines",
			Handler:    _Prescription_SearchMedicines_Handler,
		},
		{
			MethodName: "CheckDrugInteractions",
			Handler:    _Prescription_CheckDrugInteractions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prescription/v1/prescription.proto",
}
