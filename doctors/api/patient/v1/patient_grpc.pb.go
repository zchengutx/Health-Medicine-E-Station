// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: patient/v1/patient.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Patient_CreatePatient_FullMethodName         = "/api.patient.v1.Patient/CreatePatient"
	Patient_GetPatientProfile_FullMethodName     = "/api.patient.v1.Patient/GetPatientProfile"
	Patient_UpdatePatientProfile_FullMethodName  = "/api.patient.v1.Patient/UpdatePatientProfile"
	Patient_GetPatientList_FullMethodName        = "/api.patient.v1.Patient/GetPatientList"
	Patient_GetPatientsByCategory_FullMethodName = "/api.patient.v1.Patient/GetPatientsByCategory"
	Patient_UpdatePatientCategory_FullMethodName = "/api.patient.v1.Patient/UpdatePatientCategory"
)

// PatientClient is the client API for Patient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 患者管理模块
type PatientClient interface {
	// 患者信息录入
	CreatePatient(ctx context.Context, in *CreatePatientReq, opts ...grpc.CallOption) (*CreatePatientResp, error)
	// 患者档案管理
	GetPatientProfile(ctx context.Context, in *GetPatientProfileReq, opts ...grpc.CallOption) (*GetPatientProfileResp, error)
	UpdatePatientProfile(ctx context.Context, in *UpdatePatientProfileReq, opts ...grpc.CallOption) (*UpdatePatientProfileResp, error)
	GetPatientList(ctx context.Context, in *GetPatientListReq, opts ...grpc.CallOption) (*GetPatientListResp, error)
	// 患者分类管理
	GetPatientsByCategory(ctx context.Context, in *GetPatientsByCategoryReq, opts ...grpc.CallOption) (*GetPatientsByCategoryResp, error)
	UpdatePatientCategory(ctx context.Context, in *UpdatePatientCategoryReq, opts ...grpc.CallOption) (*UpdatePatientCategoryResp, error)
}

type patientClient struct {
	cc grpc.ClientConnInterface
}

func NewPatientClient(cc grpc.ClientConnInterface) PatientClient {
	return &patientClient{cc}
}

func (c *patientClient) CreatePatient(ctx context.Context, in *CreatePatientReq, opts ...grpc.CallOption) (*CreatePatientResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePatientResp)
	err := c.cc.Invoke(ctx, Patient_CreatePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientClient) GetPatientProfile(ctx context.Context, in *GetPatientProfileReq, opts ...grpc.CallOption) (*GetPatientProfileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientProfileResp)
	err := c.cc.Invoke(ctx, Patient_GetPatientProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientClient) UpdatePatientProfile(ctx context.Context, in *UpdatePatientProfileReq, opts ...grpc.CallOption) (*UpdatePatientProfileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePatientProfileResp)
	err := c.cc.Invoke(ctx, Patient_UpdatePatientProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientClient) GetPatientList(ctx context.Context, in *GetPatientListReq, opts ...grpc.CallOption) (*GetPatientListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientListResp)
	err := c.cc.Invoke(ctx, Patient_GetPatientList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientClient) GetPatientsByCategory(ctx context.Context, in *GetPatientsByCategoryReq, opts ...grpc.CallOption) (*GetPatientsByCategoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientsByCategoryResp)
	err := c.cc.Invoke(ctx, Patient_GetPatientsByCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientClient) UpdatePatientCategory(ctx context.Context, in *UpdatePatientCategoryReq, opts ...grpc.CallOption) (*UpdatePatientCategoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePatientCategoryResp)
	err := c.cc.Invoke(ctx, Patient_UpdatePatientCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientServer is the server API for Patient service.
// All implementations must embed UnimplementedPatientServer
// for forward compatibility.
//
// 患者管理模块
type PatientServer interface {
	// 患者信息录入
	CreatePatient(context.Context, *CreatePatientReq) (*CreatePatientResp, error)
	// 患者档案管理
	GetPatientProfile(context.Context, *GetPatientProfileReq) (*GetPatientProfileResp, error)
	UpdatePatientProfile(context.Context, *UpdatePatientProfileReq) (*UpdatePatientProfileResp, error)
	GetPatientList(context.Context, *GetPatientListReq) (*GetPatientListResp, error)
	// 患者分类管理
	GetPatientsByCategory(context.Context, *GetPatientsByCategoryReq) (*GetPatientsByCategoryResp, error)
	UpdatePatientCategory(context.Context, *UpdatePatientCategoryReq) (*UpdatePatientCategoryResp, error)
	mustEmbedUnimplementedPatientServer()
}

// UnimplementedPatientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPatientServer struct{}

func (UnimplementedPatientServer) CreatePatient(context.Context, *CreatePatientReq) (*CreatePatientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatient not implemented")
}
func (UnimplementedPatientServer) GetPatientProfile(context.Context, *GetPatientProfileReq) (*GetPatientProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientProfile not implemented")
}
func (UnimplementedPatientServer) UpdatePatientProfile(context.Context, *UpdatePatientProfileReq) (*UpdatePatientProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatientProfile not implemented")
}
func (UnimplementedPatientServer) GetPatientList(context.Context, *GetPatientListReq) (*GetPatientListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientList not implemented")
}
func (UnimplementedPatientServer) GetPatientsByCategory(context.Context, *GetPatientsByCategoryReq) (*GetPatientsByCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientsByCategory not implemented")
}
func (UnimplementedPatientServer) UpdatePatientCategory(context.Context, *UpdatePatientCategoryReq) (*UpdatePatientCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatientCategory not implemented")
}
func (UnimplementedPatientServer) mustEmbedUnimplementedPatientServer() {}
func (UnimplementedPatientServer) testEmbeddedByValue()                 {}

// UnsafePatientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatientServer will
// result in compilation errors.
type UnsafePatientServer interface {
	mustEmbedUnimplementedPatientServer()
}

func RegisterPatientServer(s grpc.ServiceRegistrar, srv PatientServer) {
	// If the following call pancis, it indicates UnimplementedPatientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Patient_ServiceDesc, srv)
}

func _Patient_CreatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePatientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServer).CreatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Patient_CreatePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServer).CreatePatient(ctx, req.(*CreatePatientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Patient_GetPatientProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServer).GetPatientProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Patient_GetPatientProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServer).GetPatientProfile(ctx, req.(*GetPatientProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Patient_UpdatePatientProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePatientProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServer).UpdatePatientProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Patient_UpdatePatientProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServer).UpdatePatientProfile(ctx, req.(*UpdatePatientProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Patient_GetPatientList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServer).GetPatientList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Patient_GetPatientList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServer).GetPatientList(ctx, req.(*GetPatientListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Patient_GetPatientsByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientsByCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServer).GetPatientsByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Patient_GetPatientsByCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServer).GetPatientsByCategory(ctx, req.(*GetPatientsByCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Patient_UpdatePatientCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePatientCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServer).UpdatePatientCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Patient_UpdatePatientCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServer).UpdatePatientCategory(ctx, req.(*UpdatePatientCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Patient_ServiceDesc is the grpc.ServiceDesc for Patient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Patient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.patient.v1.Patient",
	HandlerType: (*PatientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePatient",
			Handler:    _Patient_CreatePatient_Handler,
		},
		{
			MethodName: "GetPatientProfile",
			Handler:    _Patient_GetPatientProfile_Handler,
		},
		{
			MethodName: "UpdatePatientProfile",
			Handler:    _Patient_UpdatePatientProfile_Handler,
		},
		{
			MethodName: "GetPatientList",
			Handler:    _Patient_GetPatientList_Handler,
		},
		{
			MethodName: "GetPatientsByCategory",
			Handler:    _Patient_GetPatientsByCategory_Handler,
		},
		{
			MethodName: "UpdatePatientCategory",
			Handler:    _Patient_UpdatePatientCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "patient/v1/patient.proto",
}
