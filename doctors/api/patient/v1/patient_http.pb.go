// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: patient/v1/patient.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPatientCreatePatient = "/api.patient.v1.Patient/CreatePatient"
const OperationPatientGetPatientList = "/api.patient.v1.Patient/GetPatientList"
const OperationPatientGetPatientProfile = "/api.patient.v1.Patient/GetPatientProfile"
const OperationPatientGetPatientsByCategory = "/api.patient.v1.Patient/GetPatientsByCategory"
const OperationPatientUpdatePatientCategory = "/api.patient.v1.Patient/UpdatePatientCategory"
const OperationPatientUpdatePatientProfile = "/api.patient.v1.Patient/UpdatePatientProfile"

type PatientHTTPServer interface {
	// CreatePatient 患者信息录入
	CreatePatient(context.Context, *CreatePatientReq) (*CreatePatientResp, error)
	GetPatientList(context.Context, *GetPatientListReq) (*GetPatientListResp, error)
	// GetPatientProfile 患者档案管理
	GetPatientProfile(context.Context, *GetPatientProfileReq) (*GetPatientProfileResp, error)
	// GetPatientsByCategory 患者分类管理
	GetPatientsByCategory(context.Context, *GetPatientsByCategoryReq) (*GetPatientsByCategoryResp, error)
	UpdatePatientCategory(context.Context, *UpdatePatientCategoryReq) (*UpdatePatientCategoryResp, error)
	UpdatePatientProfile(context.Context, *UpdatePatientProfileReq) (*UpdatePatientProfileResp, error)
}

func RegisterPatientHTTPServer(s *http.Server, srv PatientHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/patient/create", _Patient_CreatePatient0_HTTP_Handler(srv))
	r.GET("/api/v1/patient/profile/{patient_id}", _Patient_GetPatientProfile0_HTTP_Handler(srv))
	r.PUT("/api/v1/patient/profile", _Patient_UpdatePatientProfile0_HTTP_Handler(srv))
	r.GET("/api/v1/patient/list", _Patient_GetPatientList0_HTTP_Handler(srv))
	r.GET("/api/v1/patient/category/{category}", _Patient_GetPatientsByCategory0_HTTP_Handler(srv))
	r.PUT("/api/v1/patient/category", _Patient_UpdatePatientCategory0_HTTP_Handler(srv))
}

func _Patient_CreatePatient0_HTTP_Handler(srv PatientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePatientReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPatientCreatePatient)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePatient(ctx, req.(*CreatePatientReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePatientResp)
		return ctx.Result(200, reply)
	}
}

func _Patient_GetPatientProfile0_HTTP_Handler(srv PatientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPatientProfileReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPatientGetPatientProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPatientProfile(ctx, req.(*GetPatientProfileReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPatientProfileResp)
		return ctx.Result(200, reply)
	}
}

func _Patient_UpdatePatientProfile0_HTTP_Handler(srv PatientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePatientProfileReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPatientUpdatePatientProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePatientProfile(ctx, req.(*UpdatePatientProfileReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePatientProfileResp)
		return ctx.Result(200, reply)
	}
}

func _Patient_GetPatientList0_HTTP_Handler(srv PatientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPatientListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPatientGetPatientList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPatientList(ctx, req.(*GetPatientListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPatientListResp)
		return ctx.Result(200, reply)
	}
}

func _Patient_GetPatientsByCategory0_HTTP_Handler(srv PatientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPatientsByCategoryReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPatientGetPatientsByCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPatientsByCategory(ctx, req.(*GetPatientsByCategoryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPatientsByCategoryResp)
		return ctx.Result(200, reply)
	}
}

func _Patient_UpdatePatientCategory0_HTTP_Handler(srv PatientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePatientCategoryReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPatientUpdatePatientCategory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePatientCategory(ctx, req.(*UpdatePatientCategoryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePatientCategoryResp)
		return ctx.Result(200, reply)
	}
}

type PatientHTTPClient interface {
	CreatePatient(ctx context.Context, req *CreatePatientReq, opts ...http.CallOption) (rsp *CreatePatientResp, err error)
	GetPatientList(ctx context.Context, req *GetPatientListReq, opts ...http.CallOption) (rsp *GetPatientListResp, err error)
	GetPatientProfile(ctx context.Context, req *GetPatientProfileReq, opts ...http.CallOption) (rsp *GetPatientProfileResp, err error)
	GetPatientsByCategory(ctx context.Context, req *GetPatientsByCategoryReq, opts ...http.CallOption) (rsp *GetPatientsByCategoryResp, err error)
	UpdatePatientCategory(ctx context.Context, req *UpdatePatientCategoryReq, opts ...http.CallOption) (rsp *UpdatePatientCategoryResp, err error)
	UpdatePatientProfile(ctx context.Context, req *UpdatePatientProfileReq, opts ...http.CallOption) (rsp *UpdatePatientProfileResp, err error)
}

type PatientHTTPClientImpl struct {
	cc *http.Client
}

func NewPatientHTTPClient(client *http.Client) PatientHTTPClient {
	return &PatientHTTPClientImpl{client}
}

func (c *PatientHTTPClientImpl) CreatePatient(ctx context.Context, in *CreatePatientReq, opts ...http.CallOption) (*CreatePatientResp, error) {
	var out CreatePatientResp
	pattern := "/api/v1/patient/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPatientCreatePatient))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PatientHTTPClientImpl) GetPatientList(ctx context.Context, in *GetPatientListReq, opts ...http.CallOption) (*GetPatientListResp, error) {
	var out GetPatientListResp
	pattern := "/api/v1/patient/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPatientGetPatientList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PatientHTTPClientImpl) GetPatientProfile(ctx context.Context, in *GetPatientProfileReq, opts ...http.CallOption) (*GetPatientProfileResp, error) {
	var out GetPatientProfileResp
	pattern := "/api/v1/patient/profile/{patient_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPatientGetPatientProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PatientHTTPClientImpl) GetPatientsByCategory(ctx context.Context, in *GetPatientsByCategoryReq, opts ...http.CallOption) (*GetPatientsByCategoryResp, error) {
	var out GetPatientsByCategoryResp
	pattern := "/api/v1/patient/category/{category}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPatientGetPatientsByCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PatientHTTPClientImpl) UpdatePatientCategory(ctx context.Context, in *UpdatePatientCategoryReq, opts ...http.CallOption) (*UpdatePatientCategoryResp, error) {
	var out UpdatePatientCategoryResp
	pattern := "/api/v1/patient/category"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPatientUpdatePatientCategory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PatientHTTPClientImpl) UpdatePatientProfile(ctx context.Context, in *UpdatePatientProfileReq, opts ...http.CallOption) (*UpdatePatientProfileResp, error) {
	var out UpdatePatientProfileResp
	pattern := "/api/v1/patient/profile"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPatientUpdatePatientProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
