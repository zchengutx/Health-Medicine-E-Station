// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: doctor/v1/doctor.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDoctorAuthentication = "/api.doctor.v1.Doctor/Authentication"
const OperationDoctorChangePassword = "/api.doctor.v1.Doctor/ChangePassword"
const OperationDoctorDeleteAccount = "/api.doctor.v1.Doctor/DeleteAccount"
const OperationDoctorGetDoctorProfile = "/api.doctor.v1.Doctor/GetDoctorProfile"
const OperationDoctorLoginDoctor = "/api.doctor.v1.Doctor/LoginDoctor"
const OperationDoctorRegisterDoctor = "/api.doctor.v1.Doctor/RegisterDoctor"
const OperationDoctorSendSms = "/api.doctor.v1.Doctor/SendSms"
const OperationDoctorUpdateDoctorProfile = "/api.doctor.v1.Doctor/UpdateDoctorProfile"

type DoctorHTTPServer interface {
	Authentication(context.Context, *AuthenticationReq) (*AuthenticationResp, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error)
	DeleteAccount(context.Context, *DeleteAccountReq) (*DeleteAccountResp, error)
	GetDoctorProfile(context.Context, *GetDoctorProfileReq) (*GetDoctorProfileResp, error)
	LoginDoctor(context.Context, *LoginDoctorReq) (*LoginDoctorResp, error)
	RegisterDoctor(context.Context, *RegisterDoctorReq) (*RegisterDoctorResp, error)
	SendSms(context.Context, *SendSmsReq) (*SendSmsResp, error)
	UpdateDoctorProfile(context.Context, *UpdateDoctorProfileReq) (*UpdateDoctorProfileResp, error)
}

func RegisterDoctorHTTPServer(s *http.Server, srv DoctorHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/doctor/SendSms", _Doctor_SendSms0_HTTP_Handler(srv))
	r.POST("/api/v1/doctor/RegisterDoctor", _Doctor_RegisterDoctor0_HTTP_Handler(srv))
	r.POST("/api/v1/doctor/LoginDoctor", _Doctor_LoginDoctor0_HTTP_Handler(srv))
	r.POST("/api/v1/doctor/Authentication", _Doctor_Authentication0_HTTP_Handler(srv))
	r.POST("/api/v1/doctor/GetDoctorProfile", _Doctor_GetDoctorProfile0_HTTP_Handler(srv))
	r.POST("/api/v1/doctor/UpdateDoctorProfile", _Doctor_UpdateDoctorProfile0_HTTP_Handler(srv))
	r.POST("/api/v1/doctor/ChangePassword", _Doctor_ChangePassword0_HTTP_Handler(srv))
	r.POST("/api/v1/doctor/DeleteAccount", _Doctor_DeleteAccount0_HTTP_Handler(srv))
}

func _Doctor_SendSms0_HTTP_Handler(srv DoctorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendSmsReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDoctorSendSms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendSms(ctx, req.(*SendSmsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendSmsResp)
		return ctx.Result(200, reply)
	}
}

func _Doctor_RegisterDoctor0_HTTP_Handler(srv DoctorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterDoctorReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDoctorRegisterDoctor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterDoctor(ctx, req.(*RegisterDoctorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterDoctorResp)
		return ctx.Result(200, reply)
	}
}

func _Doctor_LoginDoctor0_HTTP_Handler(srv DoctorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginDoctorReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDoctorLoginDoctor)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginDoctor(ctx, req.(*LoginDoctorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginDoctorResp)
		return ctx.Result(200, reply)
	}
}

func _Doctor_Authentication0_HTTP_Handler(srv DoctorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthenticationReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDoctorAuthentication)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Authentication(ctx, req.(*AuthenticationReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthenticationResp)
		return ctx.Result(200, reply)
	}
}

func _Doctor_GetDoctorProfile0_HTTP_Handler(srv DoctorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDoctorProfileReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDoctorGetDoctorProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDoctorProfile(ctx, req.(*GetDoctorProfileReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDoctorProfileResp)
		return ctx.Result(200, reply)
	}
}

func _Doctor_UpdateDoctorProfile0_HTTP_Handler(srv DoctorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDoctorProfileReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDoctorUpdateDoctorProfile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDoctorProfile(ctx, req.(*UpdateDoctorProfileReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDoctorProfileResp)
		return ctx.Result(200, reply)
	}
}

func _Doctor_ChangePassword0_HTTP_Handler(srv DoctorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangePasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDoctorChangePassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangePassword(ctx, req.(*ChangePasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChangePasswordResp)
		return ctx.Result(200, reply)
	}
}

func _Doctor_DeleteAccount0_HTTP_Handler(srv DoctorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAccountReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDoctorDeleteAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAccount(ctx, req.(*DeleteAccountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAccountResp)
		return ctx.Result(200, reply)
	}
}

type DoctorHTTPClient interface {
	Authentication(ctx context.Context, req *AuthenticationReq, opts ...http.CallOption) (rsp *AuthenticationResp, err error)
	ChangePassword(ctx context.Context, req *ChangePasswordReq, opts ...http.CallOption) (rsp *ChangePasswordResp, err error)
	DeleteAccount(ctx context.Context, req *DeleteAccountReq, opts ...http.CallOption) (rsp *DeleteAccountResp, err error)
	GetDoctorProfile(ctx context.Context, req *GetDoctorProfileReq, opts ...http.CallOption) (rsp *GetDoctorProfileResp, err error)
	LoginDoctor(ctx context.Context, req *LoginDoctorReq, opts ...http.CallOption) (rsp *LoginDoctorResp, err error)
	RegisterDoctor(ctx context.Context, req *RegisterDoctorReq, opts ...http.CallOption) (rsp *RegisterDoctorResp, err error)
	SendSms(ctx context.Context, req *SendSmsReq, opts ...http.CallOption) (rsp *SendSmsResp, err error)
	UpdateDoctorProfile(ctx context.Context, req *UpdateDoctorProfileReq, opts ...http.CallOption) (rsp *UpdateDoctorProfileResp, err error)
}

type DoctorHTTPClientImpl struct {
	cc *http.Client
}

func NewDoctorHTTPClient(client *http.Client) DoctorHTTPClient {
	return &DoctorHTTPClientImpl{client}
}

func (c *DoctorHTTPClientImpl) Authentication(ctx context.Context, in *AuthenticationReq, opts ...http.CallOption) (*AuthenticationResp, error) {
	var out AuthenticationResp
	pattern := "/api/v1/doctor/Authentication"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDoctorAuthentication))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DoctorHTTPClientImpl) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...http.CallOption) (*ChangePasswordResp, error) {
	var out ChangePasswordResp
	pattern := "/api/v1/doctor/ChangePassword"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDoctorChangePassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DoctorHTTPClientImpl) DeleteAccount(ctx context.Context, in *DeleteAccountReq, opts ...http.CallOption) (*DeleteAccountResp, error) {
	var out DeleteAccountResp
	pattern := "/api/v1/doctor/DeleteAccount"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDoctorDeleteAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DoctorHTTPClientImpl) GetDoctorProfile(ctx context.Context, in *GetDoctorProfileReq, opts ...http.CallOption) (*GetDoctorProfileResp, error) {
	var out GetDoctorProfileResp
	pattern := "/api/v1/doctor/GetDoctorProfile"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDoctorGetDoctorProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DoctorHTTPClientImpl) LoginDoctor(ctx context.Context, in *LoginDoctorReq, opts ...http.CallOption) (*LoginDoctorResp, error) {
	var out LoginDoctorResp
	pattern := "/api/v1/doctor/LoginDoctor"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDoctorLoginDoctor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DoctorHTTPClientImpl) RegisterDoctor(ctx context.Context, in *RegisterDoctorReq, opts ...http.CallOption) (*RegisterDoctorResp, error) {
	var out RegisterDoctorResp
	pattern := "/api/v1/doctor/RegisterDoctor"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDoctorRegisterDoctor))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DoctorHTTPClientImpl) SendSms(ctx context.Context, in *SendSmsReq, opts ...http.CallOption) (*SendSmsResp, error) {
	var out SendSmsResp
	pattern := "/api/v1/doctor/SendSms"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDoctorSendSms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DoctorHTTPClientImpl) UpdateDoctorProfile(ctx context.Context, in *UpdateDoctorProfileReq, opts ...http.CallOption) (*UpdateDoctorProfileResp, error) {
	var out UpdateDoctorProfileResp
	pattern := "/api/v1/doctor/UpdateDoctorProfile"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDoctorUpdateDoctorProfile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
