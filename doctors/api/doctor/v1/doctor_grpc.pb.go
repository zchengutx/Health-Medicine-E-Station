// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: doctor.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Doctor_SendSms_FullMethodName             = "/api.doctor.v1.Doctor/SendSms"
	Doctor_RegisterDoctor_FullMethodName      = "/api.doctor.v1.Doctor/RegisterDoctor"
	Doctor_LoginDoctor_FullMethodName         = "/api.doctor.v1.Doctor/LoginDoctor"
	Doctor_Authentication_FullMethodName      = "/api.doctor.v1.Doctor/Authentication"
	Doctor_GetDoctorProfile_FullMethodName    = "/api.doctor.v1.Doctor/GetDoctorProfile"
	Doctor_UpdateDoctorProfile_FullMethodName = "/api.doctor.v1.Doctor/UpdateDoctorProfile"
	Doctor_ChangePassword_FullMethodName      = "/api.doctor.v1.Doctor/ChangePassword"
	Doctor_DeleteAccount_FullMethodName       = "/api.doctor.v1.Doctor/DeleteAccount"
)

// DoctorClient is the client API for Doctor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 医生用户管理模块
type DoctorClient interface {
	SendSms(ctx context.Context, in *SendSmsReq, opts ...grpc.CallOption) (*SendSmsResp, error)
	RegisterDoctor(ctx context.Context, in *RegisterDoctorReq, opts ...grpc.CallOption) (*RegisterDoctorResp, error)
	LoginDoctor(ctx context.Context, in *LoginDoctorReq, opts ...grpc.CallOption) (*LoginDoctorResp, error)
	Authentication(ctx context.Context, in *AuthenticationReq, opts ...grpc.CallOption) (*AuthenticationResp, error)
	GetDoctorProfile(ctx context.Context, in *GetDoctorProfileReq, opts ...grpc.CallOption) (*GetDoctorProfileResp, error)
	UpdateDoctorProfile(ctx context.Context, in *UpdateDoctorProfileReq, opts ...grpc.CallOption) (*UpdateDoctorProfileResp, error)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountReq, opts ...grpc.CallOption) (*DeleteAccountResp, error)
}

type doctorClient struct {
	cc grpc.ClientConnInterface
}

func NewDoctorClient(cc grpc.ClientConnInterface) DoctorClient {
	return &doctorClient{cc}
}

func (c *doctorClient) SendSms(ctx context.Context, in *SendSmsReq, opts ...grpc.CallOption) (*SendSmsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSmsResp)
	err := c.cc.Invoke(ctx, Doctor_SendSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorClient) RegisterDoctor(ctx context.Context, in *RegisterDoctorReq, opts ...grpc.CallOption) (*RegisterDoctorResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDoctorResp)
	err := c.cc.Invoke(ctx, Doctor_RegisterDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorClient) LoginDoctor(ctx context.Context, in *LoginDoctorReq, opts ...grpc.CallOption) (*LoginDoctorResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginDoctorResp)
	err := c.cc.Invoke(ctx, Doctor_LoginDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorClient) Authentication(ctx context.Context, in *AuthenticationReq, opts ...grpc.CallOption) (*AuthenticationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticationResp)
	err := c.cc.Invoke(ctx, Doctor_Authentication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorClient) GetDoctorProfile(ctx context.Context, in *GetDoctorProfileReq, opts ...grpc.CallOption) (*GetDoctorProfileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDoctorProfileResp)
	err := c.cc.Invoke(ctx, Doctor_GetDoctorProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorClient) UpdateDoctorProfile(ctx context.Context, in *UpdateDoctorProfileReq, opts ...grpc.CallOption) (*UpdateDoctorProfileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDoctorProfileResp)
	err := c.cc.Invoke(ctx, Doctor_UpdateDoctorProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResp)
	err := c.cc.Invoke(ctx, Doctor_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorClient) DeleteAccount(ctx context.Context, in *DeleteAccountReq, opts ...grpc.CallOption) (*DeleteAccountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountResp)
	err := c.cc.Invoke(ctx, Doctor_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorServer is the server API for Doctor service.
// All implementations must embed UnimplementedDoctorServer
// for forward compatibility.
//
// 医生用户管理模块
type DoctorServer interface {
	SendSms(context.Context, *SendSmsReq) (*SendSmsResp, error)
	RegisterDoctor(context.Context, *RegisterDoctorReq) (*RegisterDoctorResp, error)
	LoginDoctor(context.Context, *LoginDoctorReq) (*LoginDoctorResp, error)
	Authentication(context.Context, *AuthenticationReq) (*AuthenticationResp, error)
	GetDoctorProfile(context.Context, *GetDoctorProfileReq) (*GetDoctorProfileResp, error)
	UpdateDoctorProfile(context.Context, *UpdateDoctorProfileReq) (*UpdateDoctorProfileResp, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error)
	DeleteAccount(context.Context, *DeleteAccountReq) (*DeleteAccountResp, error)
	mustEmbedUnimplementedDoctorServer()
}

// UnimplementedDoctorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDoctorServer struct{}

func (UnimplementedDoctorServer) SendSms(context.Context, *SendSmsReq) (*SendSmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedDoctorServer) RegisterDoctor(context.Context, *RegisterDoctorReq) (*RegisterDoctorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDoctor not implemented")
}
func (UnimplementedDoctorServer) LoginDoctor(context.Context, *LoginDoctorReq) (*LoginDoctorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginDoctor not implemented")
}
func (UnimplementedDoctorServer) Authentication(context.Context, *AuthenticationReq) (*AuthenticationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authentication not implemented")
}
func (UnimplementedDoctorServer) GetDoctorProfile(context.Context, *GetDoctorProfileReq) (*GetDoctorProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorProfile not implemented")
}
func (UnimplementedDoctorServer) UpdateDoctorProfile(context.Context, *UpdateDoctorProfileReq) (*UpdateDoctorProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctorProfile not implemented")
}
func (UnimplementedDoctorServer) ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedDoctorServer) DeleteAccount(context.Context, *DeleteAccountReq) (*DeleteAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedDoctorServer) mustEmbedUnimplementedDoctorServer() {}
func (UnimplementedDoctorServer) testEmbeddedByValue()                {}

// UnsafeDoctorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoctorServer will
// result in compilation errors.
type UnsafeDoctorServer interface {
	mustEmbedUnimplementedDoctorServer()
}

func RegisterDoctorServer(s grpc.ServiceRegistrar, srv DoctorServer) {
	// If the following call pancis, it indicates UnimplementedDoctorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Doctor_ServiceDesc, srv)
}

func _Doctor_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Doctor_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServer).SendSms(ctx, req.(*SendSmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Doctor_RegisterDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDoctorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServer).RegisterDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Doctor_RegisterDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServer).RegisterDoctor(ctx, req.(*RegisterDoctorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Doctor_LoginDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginDoctorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServer).LoginDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Doctor_LoginDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServer).LoginDoctor(ctx, req.(*LoginDoctorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Doctor_Authentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServer).Authentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Doctor_Authentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServer).Authentication(ctx, req.(*AuthenticationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Doctor_GetDoctorProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServer).GetDoctorProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Doctor_GetDoctorProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServer).GetDoctorProfile(ctx, req.(*GetDoctorProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Doctor_UpdateDoctorProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoctorProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServer).UpdateDoctorProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Doctor_UpdateDoctorProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServer).UpdateDoctorProfile(ctx, req.(*UpdateDoctorProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Doctor_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Doctor_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Doctor_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Doctor_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServer).DeleteAccount(ctx, req.(*DeleteAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Doctor_ServiceDesc is the grpc.ServiceDesc for Doctor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Doctor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.doctor.v1.Doctor",
	HandlerType: (*DoctorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSms",
			Handler:    _Doctor_SendSms_Handler,
		},
		{
			MethodName: "RegisterDoctor",
			Handler:    _Doctor_RegisterDoctor_Handler,
		},
		{
			MethodName: "LoginDoctor",
			Handler:    _Doctor_LoginDoctor_Handler,
		},
		{
			MethodName: "Authentication",
			Handler:    _Doctor_Authentication_Handler,
		},
		{
			MethodName: "GetDoctorProfile",
			Handler:    _Doctor_GetDoctorProfile_Handler,
		},
		{
			MethodName: "UpdateDoctorProfile",
			Handler:    _Doctor_UpdateDoctorProfile_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Doctor_ChangePassword_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _Doctor_DeleteAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doctor.proto",
}
