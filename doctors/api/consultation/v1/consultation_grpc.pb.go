// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: consultation/v1/consultation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Consultation_StartConsultation_FullMethodName        = "/api.consultation.v1.Consultation/StartConsultation"
	Consultation_GetConsultationDetail_FullMethodName    = "/api.consultation.v1.Consultation/GetConsultationDetail"
	Consultation_UpdateConsultationStatus_FullMethodName = "/api.consultation.v1.Consultation/UpdateConsultationStatus"
	Consultation_EndConsultation_FullMethodName          = "/api.consultation.v1.Consultation/EndConsultation"
	Consultation_GetConsultationHistory_FullMethodName   = "/api.consultation.v1.Consultation/GetConsultationHistory"
	Consultation_AddConsultationRecord_FullMethodName    = "/api.consultation.v1.Consultation/AddConsultationRecord"
	Consultation_GetConsultationRecords_FullMethodName   = "/api.consultation.v1.Consultation/GetConsultationRecords"
	Consultation_GetConsultationReport_FullMethodName    = "/api.consultation.v1.Consultation/GetConsultationReport"
	Consultation_GetConsultationsByType_FullMethodName   = "/api.consultation.v1.Consultation/GetConsultationsByType"
	Consultation_SendMessage_FullMethodName              = "/api.consultation.v1.Consultation/SendMessage"
	Consultation_GetMessages_FullMethodName              = "/api.consultation.v1.Consultation/GetMessages"
	Consultation_MarkMessageRead_FullMethodName          = "/api.consultation.v1.Consultation/MarkMessageRead"
)

// ConsultationClient is the client API for Consultation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 问诊服务模块
type ConsultationClient interface {
	// 在线问诊
	StartConsultation(ctx context.Context, in *StartConsultationReq, opts ...grpc.CallOption) (*StartConsultationResp, error)
	GetConsultationDetail(ctx context.Context, in *GetConsultationDetailReq, opts ...grpc.CallOption) (*GetConsultationDetailResp, error)
	UpdateConsultationStatus(ctx context.Context, in *UpdateConsultationStatusReq, opts ...grpc.CallOption) (*UpdateConsultationStatusResp, error)
	EndConsultation(ctx context.Context, in *EndConsultationReq, opts ...grpc.CallOption) (*EndConsultationResp, error)
	// 问诊记录管理
	GetConsultationHistory(ctx context.Context, in *GetConsultationHistoryReq, opts ...grpc.CallOption) (*GetConsultationHistoryResp, error)
	AddConsultationRecord(ctx context.Context, in *AddConsultationRecordReq, opts ...grpc.CallOption) (*AddConsultationRecordResp, error)
	GetConsultationRecords(ctx context.Context, in *GetConsultationRecordsReq, opts ...grpc.CallOption) (*GetConsultationRecordsResp, error)
	// 问诊状态报告
	GetConsultationReport(ctx context.Context, in *GetConsultationReportReq, opts ...grpc.CallOption) (*GetConsultationReportResp, error)
	// 问诊分类 (图文问诊、视频问诊等)
	GetConsultationsByType(ctx context.Context, in *GetConsultationsByTypeReq, opts ...grpc.CallOption) (*GetConsultationsByTypeResp, error)
	// 消息相关接口
	SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error)
	GetMessages(ctx context.Context, in *GetMessagesReq, opts ...grpc.CallOption) (*GetMessagesResp, error)
	MarkMessageRead(ctx context.Context, in *MarkMessageReadReq, opts ...grpc.CallOption) (*MarkMessageReadResp, error)
}

type consultationClient struct {
	cc grpc.ClientConnInterface
}

func NewConsultationClient(cc grpc.ClientConnInterface) ConsultationClient {
	return &consultationClient{cc}
}

func (c *consultationClient) StartConsultation(ctx context.Context, in *StartConsultationReq, opts ...grpc.CallOption) (*StartConsultationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartConsultationResp)
	err := c.cc.Invoke(ctx, Consultation_StartConsultation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationClient) GetConsultationDetail(ctx context.Context, in *GetConsultationDetailReq, opts ...grpc.CallOption) (*GetConsultationDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConsultationDetailResp)
	err := c.cc.Invoke(ctx, Consultation_GetConsultationDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationClient) UpdateConsultationStatus(ctx context.Context, in *UpdateConsultationStatusReq, opts ...grpc.CallOption) (*UpdateConsultationStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConsultationStatusResp)
	err := c.cc.Invoke(ctx, Consultation_UpdateConsultationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationClient) EndConsultation(ctx context.Context, in *EndConsultationReq, opts ...grpc.CallOption) (*EndConsultationResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndConsultationResp)
	err := c.cc.Invoke(ctx, Consultation_EndConsultation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationClient) GetConsultationHistory(ctx context.Context, in *GetConsultationHistoryReq, opts ...grpc.CallOption) (*GetConsultationHistoryResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConsultationHistoryResp)
	err := c.cc.Invoke(ctx, Consultation_GetConsultationHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationClient) AddConsultationRecord(ctx context.Context, in *AddConsultationRecordReq, opts ...grpc.CallOption) (*AddConsultationRecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddConsultationRecordResp)
	err := c.cc.Invoke(ctx, Consultation_AddConsultationRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationClient) GetConsultationRecords(ctx context.Context, in *GetConsultationRecordsReq, opts ...grpc.CallOption) (*GetConsultationRecordsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConsultationRecordsResp)
	err := c.cc.Invoke(ctx, Consultation_GetConsultationRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationClient) GetConsultationReport(ctx context.Context, in *GetConsultationReportReq, opts ...grpc.CallOption) (*GetConsultationReportResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConsultationReportResp)
	err := c.cc.Invoke(ctx, Consultation_GetConsultationReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationClient) GetConsultationsByType(ctx context.Context, in *GetConsultationsByTypeReq, opts ...grpc.CallOption) (*GetConsultationsByTypeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConsultationsByTypeResp)
	err := c.cc.Invoke(ctx, Consultation_GetConsultationsByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationClient) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResp)
	err := c.cc.Invoke(ctx, Consultation_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationClient) GetMessages(ctx context.Context, in *GetMessagesReq, opts ...grpc.CallOption) (*GetMessagesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessagesResp)
	err := c.cc.Invoke(ctx, Consultation_GetMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationClient) MarkMessageRead(ctx context.Context, in *MarkMessageReadReq, opts ...grpc.CallOption) (*MarkMessageReadResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkMessageReadResp)
	err := c.cc.Invoke(ctx, Consultation_MarkMessageRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsultationServer is the server API for Consultation service.
// All implementations must embed UnimplementedConsultationServer
// for forward compatibility.
//
// 问诊服务模块
type ConsultationServer interface {
	// 在线问诊
	StartConsultation(context.Context, *StartConsultationReq) (*StartConsultationResp, error)
	GetConsultationDetail(context.Context, *GetConsultationDetailReq) (*GetConsultationDetailResp, error)
	UpdateConsultationStatus(context.Context, *UpdateConsultationStatusReq) (*UpdateConsultationStatusResp, error)
	EndConsultation(context.Context, *EndConsultationReq) (*EndConsultationResp, error)
	// 问诊记录管理
	GetConsultationHistory(context.Context, *GetConsultationHistoryReq) (*GetConsultationHistoryResp, error)
	AddConsultationRecord(context.Context, *AddConsultationRecordReq) (*AddConsultationRecordResp, error)
	GetConsultationRecords(context.Context, *GetConsultationRecordsReq) (*GetConsultationRecordsResp, error)
	// 问诊状态报告
	GetConsultationReport(context.Context, *GetConsultationReportReq) (*GetConsultationReportResp, error)
	// 问诊分类 (图文问诊、视频问诊等)
	GetConsultationsByType(context.Context, *GetConsultationsByTypeReq) (*GetConsultationsByTypeResp, error)
	// 消息相关接口
	SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error)
	GetMessages(context.Context, *GetMessagesReq) (*GetMessagesResp, error)
	MarkMessageRead(context.Context, *MarkMessageReadReq) (*MarkMessageReadResp, error)
	mustEmbedUnimplementedConsultationServer()
}

// UnimplementedConsultationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConsultationServer struct{}

func (UnimplementedConsultationServer) StartConsultation(context.Context, *StartConsultationReq) (*StartConsultationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartConsultation not implemented")
}
func (UnimplementedConsultationServer) GetConsultationDetail(context.Context, *GetConsultationDetailReq) (*GetConsultationDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsultationDetail not implemented")
}
func (UnimplementedConsultationServer) UpdateConsultationStatus(context.Context, *UpdateConsultationStatusReq) (*UpdateConsultationStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsultationStatus not implemented")
}
func (UnimplementedConsultationServer) EndConsultation(context.Context, *EndConsultationReq) (*EndConsultationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndConsultation not implemented")
}
func (UnimplementedConsultationServer) GetConsultationHistory(context.Context, *GetConsultationHistoryReq) (*GetConsultationHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsultationHistory not implemented")
}
func (UnimplementedConsultationServer) AddConsultationRecord(context.Context, *AddConsultationRecordReq) (*AddConsultationRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConsultationRecord not implemented")
}
func (UnimplementedConsultationServer) GetConsultationRecords(context.Context, *GetConsultationRecordsReq) (*GetConsultationRecordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsultationRecords not implemented")
}
func (UnimplementedConsultationServer) GetConsultationReport(context.Context, *GetConsultationReportReq) (*GetConsultationReportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsultationReport not implemented")
}
func (UnimplementedConsultationServer) GetConsultationsByType(context.Context, *GetConsultationsByTypeReq) (*GetConsultationsByTypeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsultationsByType not implemented")
}
func (UnimplementedConsultationServer) SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedConsultationServer) GetMessages(context.Context, *GetMessagesReq) (*GetMessagesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedConsultationServer) MarkMessageRead(context.Context, *MarkMessageReadReq) (*MarkMessageReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkMessageRead not implemented")
}
func (UnimplementedConsultationServer) mustEmbedUnimplementedConsultationServer() {}
func (UnimplementedConsultationServer) testEmbeddedByValue()                      {}

// UnsafeConsultationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsultationServer will
// result in compilation errors.
type UnsafeConsultationServer interface {
	mustEmbedUnimplementedConsultationServer()
}

func RegisterConsultationServer(s grpc.ServiceRegistrar, srv ConsultationServer) {
	// If the following call pancis, it indicates UnimplementedConsultationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Consultation_ServiceDesc, srv)
}

func _Consultation_StartConsultation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartConsultationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServer).StartConsultation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultation_StartConsultation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServer).StartConsultation(ctx, req.(*StartConsultationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultation_GetConsultationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsultationDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServer).GetConsultationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultation_GetConsultationDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServer).GetConsultationDetail(ctx, req.(*GetConsultationDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultation_UpdateConsultationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConsultationStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServer).UpdateConsultationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultation_UpdateConsultationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServer).UpdateConsultationStatus(ctx, req.(*UpdateConsultationStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultation_EndConsultation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndConsultationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServer).EndConsultation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultation_EndConsultation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServer).EndConsultation(ctx, req.(*EndConsultationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultation_GetConsultationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsultationHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServer).GetConsultationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultation_GetConsultationHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServer).GetConsultationHistory(ctx, req.(*GetConsultationHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultation_AddConsultationRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConsultationRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServer).AddConsultationRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultation_AddConsultationRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServer).AddConsultationRecord(ctx, req.(*AddConsultationRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultation_GetConsultationRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsultationRecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServer).GetConsultationRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultation_GetConsultationRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServer).GetConsultationRecords(ctx, req.(*GetConsultationRecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultation_GetConsultationReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsultationReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServer).GetConsultationReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultation_GetConsultationReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServer).GetConsultationReport(ctx, req.(*GetConsultationReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultation_GetConsultationsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsultationsByTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServer).GetConsultationsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultation_GetConsultationsByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServer).GetConsultationsByType(ctx, req.(*GetConsultationsByTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultation_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultation_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServer).SendMessage(ctx, req.(*SendMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultation_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultation_GetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServer).GetMessages(ctx, req.(*GetMessagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consultation_MarkMessageRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkMessageReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultationServer).MarkMessageRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Consultation_MarkMessageRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultationServer).MarkMessageRead(ctx, req.(*MarkMessageReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Consultation_ServiceDesc is the grpc.ServiceDesc for Consultation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consultation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.consultation.v1.Consultation",
	HandlerType: (*ConsultationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartConsultation",
			Handler:    _Consultation_StartConsultation_Handler,
		},
		{
			MethodName: "GetConsultationDetail",
			Handler:    _Consultation_GetConsultationDetail_Handler,
		},
		{
			MethodName: "UpdateConsultationStatus",
			Handler:    _Consultation_UpdateConsultationStatus_Handler,
		},
		{
			MethodName: "EndConsultation",
			Handler:    _Consultation_EndConsultation_Handler,
		},
		{
			MethodName: "GetConsultationHistory",
			Handler:    _Consultation_GetConsultationHistory_Handler,
		},
		{
			MethodName: "AddConsultationRecord",
			Handler:    _Consultation_AddConsultationRecord_Handler,
		},
		{
			MethodName: "GetConsultationRecords",
			Handler:    _Consultation_GetConsultationRecords_Handler,
		},
		{
			MethodName: "GetConsultationReport",
			Handler:    _Consultation_GetConsultationReport_Handler,
		},
		{
			MethodName: "GetConsultationsByType",
			Handler:    _Consultation_GetConsultationsByType_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Consultation_SendMessage_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _Consultation_GetMessages_Handler,
		},
		{
			MethodName: "MarkMessageRead",
			Handler:    _Consultation_MarkMessageRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consultation/v1/consultation.proto",
}
