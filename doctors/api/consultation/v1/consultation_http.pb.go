// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: consultation/v1/consultation.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationConsultationAddConsultationRecord = "/api.consultation.v1.Consultation/AddConsultationRecord"
const OperationConsultationEndConsultation = "/api.consultation.v1.Consultation/EndConsultation"
const OperationConsultationGetConsultationDetail = "/api.consultation.v1.Consultation/GetConsultationDetail"
const OperationConsultationGetConsultationHistory = "/api.consultation.v1.Consultation/GetConsultationHistory"
const OperationConsultationGetConsultationRecords = "/api.consultation.v1.Consultation/GetConsultationRecords"
const OperationConsultationGetConsultationReport = "/api.consultation.v1.Consultation/GetConsultationReport"
const OperationConsultationGetConsultationsByType = "/api.consultation.v1.Consultation/GetConsultationsByType"
const OperationConsultationGetMessages = "/api.consultation.v1.Consultation/GetMessages"
const OperationConsultationMarkMessageRead = "/api.consultation.v1.Consultation/MarkMessageRead"
const OperationConsultationSendMessage = "/api.consultation.v1.Consultation/SendMessage"
const OperationConsultationStartConsultation = "/api.consultation.v1.Consultation/StartConsultation"
const OperationConsultationUpdateConsultationStatus = "/api.consultation.v1.Consultation/UpdateConsultationStatus"

type ConsultationHTTPServer interface {
	AddConsultationRecord(context.Context, *AddConsultationRecordReq) (*AddConsultationRecordResp, error)
	EndConsultation(context.Context, *EndConsultationReq) (*EndConsultationResp, error)
	GetConsultationDetail(context.Context, *GetConsultationDetailReq) (*GetConsultationDetailResp, error)
	// GetConsultationHistory 问诊记录管理
	GetConsultationHistory(context.Context, *GetConsultationHistoryReq) (*GetConsultationHistoryResp, error)
	GetConsultationRecords(context.Context, *GetConsultationRecordsReq) (*GetConsultationRecordsResp, error)
	// GetConsultationReport 问诊状态报告
	GetConsultationReport(context.Context, *GetConsultationReportReq) (*GetConsultationReportResp, error)
	// GetConsultationsByType 问诊分类 (图文问诊、视频问诊等)
	GetConsultationsByType(context.Context, *GetConsultationsByTypeReq) (*GetConsultationsByTypeResp, error)
	GetMessages(context.Context, *GetMessagesReq) (*GetMessagesResp, error)
	MarkMessageRead(context.Context, *MarkMessageReadReq) (*MarkMessageReadResp, error)
	// SendMessage 消息相关接口
	SendMessage(context.Context, *SendMessageReq) (*SendMessageResp, error)
	// StartConsultation 在线问诊
	StartConsultation(context.Context, *StartConsultationReq) (*StartConsultationResp, error)
	UpdateConsultationStatus(context.Context, *UpdateConsultationStatusReq) (*UpdateConsultationStatusResp, error)
}

func RegisterConsultationHTTPServer(s *http.Server, srv ConsultationHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/consultation/start", _Consultation_StartConsultation0_HTTP_Handler(srv))
	r.GET("/api/v1/consultation/detail/{consultation_id}", _Consultation_GetConsultationDetail0_HTTP_Handler(srv))
	r.PUT("/api/v1/consultation/status", _Consultation_UpdateConsultationStatus0_HTTP_Handler(srv))
	r.POST("/api/v1/consultation/end", _Consultation_EndConsultation0_HTTP_Handler(srv))
	r.GET("/api/v1/consultation/history", _Consultation_GetConsultationHistory0_HTTP_Handler(srv))
	r.POST("/api/v1/consultation/record", _Consultation_AddConsultationRecord0_HTTP_Handler(srv))
	r.GET("/api/v1/consultation/records/{consultation_id}", _Consultation_GetConsultationRecords0_HTTP_Handler(srv))
	r.GET("/api/v1/consultation/report/{consultation_id}", _Consultation_GetConsultationReport0_HTTP_Handler(srv))
	r.GET("/api/v1/consultation/type/{type}", _Consultation_GetConsultationsByType0_HTTP_Handler(srv))
	r.POST("/api/v1/consultation/message/send", _Consultation_SendMessage0_HTTP_Handler(srv))
	r.GET("/api/v1/consultation/messages/{consultation_id}", _Consultation_GetMessages0_HTTP_Handler(srv))
	r.PUT("/api/v1/consultation/message/read", _Consultation_MarkMessageRead0_HTTP_Handler(srv))
}

func _Consultation_StartConsultation0_HTTP_Handler(srv ConsultationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StartConsultationReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultationStartConsultation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StartConsultation(ctx, req.(*StartConsultationReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StartConsultationResp)
		return ctx.Result(200, reply)
	}
}

func _Consultation_GetConsultationDetail0_HTTP_Handler(srv ConsultationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConsultationDetailReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultationGetConsultationDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConsultationDetail(ctx, req.(*GetConsultationDetailReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetConsultationDetailResp)
		return ctx.Result(200, reply)
	}
}

func _Consultation_UpdateConsultationStatus0_HTTP_Handler(srv ConsultationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateConsultationStatusReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultationUpdateConsultationStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateConsultationStatus(ctx, req.(*UpdateConsultationStatusReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateConsultationStatusResp)
		return ctx.Result(200, reply)
	}
}

func _Consultation_EndConsultation0_HTTP_Handler(srv ConsultationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EndConsultationReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultationEndConsultation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EndConsultation(ctx, req.(*EndConsultationReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EndConsultationResp)
		return ctx.Result(200, reply)
	}
}

func _Consultation_GetConsultationHistory0_HTTP_Handler(srv ConsultationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConsultationHistoryReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultationGetConsultationHistory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConsultationHistory(ctx, req.(*GetConsultationHistoryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetConsultationHistoryResp)
		return ctx.Result(200, reply)
	}
}

func _Consultation_AddConsultationRecord0_HTTP_Handler(srv ConsultationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddConsultationRecordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultationAddConsultationRecord)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddConsultationRecord(ctx, req.(*AddConsultationRecordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddConsultationRecordResp)
		return ctx.Result(200, reply)
	}
}

func _Consultation_GetConsultationRecords0_HTTP_Handler(srv ConsultationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConsultationRecordsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultationGetConsultationRecords)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConsultationRecords(ctx, req.(*GetConsultationRecordsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetConsultationRecordsResp)
		return ctx.Result(200, reply)
	}
}

func _Consultation_GetConsultationReport0_HTTP_Handler(srv ConsultationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConsultationReportReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultationGetConsultationReport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConsultationReport(ctx, req.(*GetConsultationReportReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetConsultationReportResp)
		return ctx.Result(200, reply)
	}
}

func _Consultation_GetConsultationsByType0_HTTP_Handler(srv ConsultationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConsultationsByTypeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultationGetConsultationsByType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConsultationsByType(ctx, req.(*GetConsultationsByTypeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetConsultationsByTypeResp)
		return ctx.Result(200, reply)
	}
}

func _Consultation_SendMessage0_HTTP_Handler(srv ConsultationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendMessageReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultationSendMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendMessage(ctx, req.(*SendMessageReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendMessageResp)
		return ctx.Result(200, reply)
	}
}

func _Consultation_GetMessages0_HTTP_Handler(srv ConsultationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMessagesReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultationGetMessages)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMessages(ctx, req.(*GetMessagesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMessagesResp)
		return ctx.Result(200, reply)
	}
}

func _Consultation_MarkMessageRead0_HTTP_Handler(srv ConsultationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MarkMessageReadReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsultationMarkMessageRead)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MarkMessageRead(ctx, req.(*MarkMessageReadReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MarkMessageReadResp)
		return ctx.Result(200, reply)
	}
}

type ConsultationHTTPClient interface {
	AddConsultationRecord(ctx context.Context, req *AddConsultationRecordReq, opts ...http.CallOption) (rsp *AddConsultationRecordResp, err error)
	EndConsultation(ctx context.Context, req *EndConsultationReq, opts ...http.CallOption) (rsp *EndConsultationResp, err error)
	GetConsultationDetail(ctx context.Context, req *GetConsultationDetailReq, opts ...http.CallOption) (rsp *GetConsultationDetailResp, err error)
	GetConsultationHistory(ctx context.Context, req *GetConsultationHistoryReq, opts ...http.CallOption) (rsp *GetConsultationHistoryResp, err error)
	GetConsultationRecords(ctx context.Context, req *GetConsultationRecordsReq, opts ...http.CallOption) (rsp *GetConsultationRecordsResp, err error)
	GetConsultationReport(ctx context.Context, req *GetConsultationReportReq, opts ...http.CallOption) (rsp *GetConsultationReportResp, err error)
	GetConsultationsByType(ctx context.Context, req *GetConsultationsByTypeReq, opts ...http.CallOption) (rsp *GetConsultationsByTypeResp, err error)
	GetMessages(ctx context.Context, req *GetMessagesReq, opts ...http.CallOption) (rsp *GetMessagesResp, err error)
	MarkMessageRead(ctx context.Context, req *MarkMessageReadReq, opts ...http.CallOption) (rsp *MarkMessageReadResp, err error)
	SendMessage(ctx context.Context, req *SendMessageReq, opts ...http.CallOption) (rsp *SendMessageResp, err error)
	StartConsultation(ctx context.Context, req *StartConsultationReq, opts ...http.CallOption) (rsp *StartConsultationResp, err error)
	UpdateConsultationStatus(ctx context.Context, req *UpdateConsultationStatusReq, opts ...http.CallOption) (rsp *UpdateConsultationStatusResp, err error)
}

type ConsultationHTTPClientImpl struct {
	cc *http.Client
}

func NewConsultationHTTPClient(client *http.Client) ConsultationHTTPClient {
	return &ConsultationHTTPClientImpl{client}
}

func (c *ConsultationHTTPClientImpl) AddConsultationRecord(ctx context.Context, in *AddConsultationRecordReq, opts ...http.CallOption) (*AddConsultationRecordResp, error) {
	var out AddConsultationRecordResp
	pattern := "/api/v1/consultation/record"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConsultationAddConsultationRecord))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultationHTTPClientImpl) EndConsultation(ctx context.Context, in *EndConsultationReq, opts ...http.CallOption) (*EndConsultationResp, error) {
	var out EndConsultationResp
	pattern := "/api/v1/consultation/end"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConsultationEndConsultation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultationHTTPClientImpl) GetConsultationDetail(ctx context.Context, in *GetConsultationDetailReq, opts ...http.CallOption) (*GetConsultationDetailResp, error) {
	var out GetConsultationDetailResp
	pattern := "/api/v1/consultation/detail/{consultation_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsultationGetConsultationDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultationHTTPClientImpl) GetConsultationHistory(ctx context.Context, in *GetConsultationHistoryReq, opts ...http.CallOption) (*GetConsultationHistoryResp, error) {
	var out GetConsultationHistoryResp
	pattern := "/api/v1/consultation/history"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsultationGetConsultationHistory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultationHTTPClientImpl) GetConsultationRecords(ctx context.Context, in *GetConsultationRecordsReq, opts ...http.CallOption) (*GetConsultationRecordsResp, error) {
	var out GetConsultationRecordsResp
	pattern := "/api/v1/consultation/records/{consultation_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsultationGetConsultationRecords))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultationHTTPClientImpl) GetConsultationReport(ctx context.Context, in *GetConsultationReportReq, opts ...http.CallOption) (*GetConsultationReportResp, error) {
	var out GetConsultationReportResp
	pattern := "/api/v1/consultation/report/{consultation_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsultationGetConsultationReport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultationHTTPClientImpl) GetConsultationsByType(ctx context.Context, in *GetConsultationsByTypeReq, opts ...http.CallOption) (*GetConsultationsByTypeResp, error) {
	var out GetConsultationsByTypeResp
	pattern := "/api/v1/consultation/type/{type}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsultationGetConsultationsByType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultationHTTPClientImpl) GetMessages(ctx context.Context, in *GetMessagesReq, opts ...http.CallOption) (*GetMessagesResp, error) {
	var out GetMessagesResp
	pattern := "/api/v1/consultation/messages/{consultation_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConsultationGetMessages))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultationHTTPClientImpl) MarkMessageRead(ctx context.Context, in *MarkMessageReadReq, opts ...http.CallOption) (*MarkMessageReadResp, error) {
	var out MarkMessageReadResp
	pattern := "/api/v1/consultation/message/read"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConsultationMarkMessageRead))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultationHTTPClientImpl) SendMessage(ctx context.Context, in *SendMessageReq, opts ...http.CallOption) (*SendMessageResp, error) {
	var out SendMessageResp
	pattern := "/api/v1/consultation/message/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConsultationSendMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultationHTTPClientImpl) StartConsultation(ctx context.Context, in *StartConsultationReq, opts ...http.CallOption) (*StartConsultationResp, error) {
	var out StartConsultationResp
	pattern := "/api/v1/consultation/start"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConsultationStartConsultation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConsultationHTTPClientImpl) UpdateConsultationStatus(ctx context.Context, in *UpdateConsultationStatusReq, opts ...http.CallOption) (*UpdateConsultationStatusResp, error) {
	var out UpdateConsultationStatusResp
	pattern := "/api/v1/consultation/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConsultationUpdateConsultationStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
