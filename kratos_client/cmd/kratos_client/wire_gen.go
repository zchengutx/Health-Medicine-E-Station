// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"kratos_client/internal/biz"
	"kratos_client/internal/conf"
	"kratos_client/internal/data"
	"kratos_client/internal/server"
	"kratos_client/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db, err := data.NewDb(confData)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(confData, logger, db)
	if err != nil {
		return nil, nil, err
	}
	doctorsRepo := data.NewDoctorsRepo(dataData, logger)
	doctorsService := biz.NewDoctorsUsecase(doctorsRepo, logger)
	serviceDoctorsService := service.NewDoctorsService(doctorsService, dataData)
	drugRepo := data.NewDrugRepo(dataData, logger)
	drugService := biz.NewDrugService(drugRepo, logger)
	serviceDrugService := service.NewDrugService(drugService, dataData)
	estimateRepo := data.NewEstimateRepo(dataData, logger)
	estimateService := biz.NewEstimateService(estimateRepo, logger)
	serviceEstimateService := service.NewEstimateService(estimateService, dataData)
	grpcServer := server.NewGRPCServer(confServer, serviceDoctorsService, serviceDrugService, serviceEstimateService, logger)
	userRepo := data.NewUserRepo(dataData, logger)
	userService := biz.NewUserUsecase(userRepo, logger)
	cityRepo := data.NewCityRepo(dataData, logger)
	cityService := biz.NewCityUsecase(cityRepo, logger)
	serviceUserService := service.NewUserService(userService, dataData, cityService)
	chatRepo := data.NewChatRepo(dataData, logger)
	chatService := biz.NewChatService(chatRepo, logger)
	serviceChatService := service.NewChatService(chatService, dataData)
	httpServer := server.NewHTTPServer(confServer, serviceUserService, serviceDoctorsService, serviceDrugService, serviceEstimateService, serviceChatService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
