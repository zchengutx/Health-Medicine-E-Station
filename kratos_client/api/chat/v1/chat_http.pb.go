// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: chat/v1/chat.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationChatGetChatHistory = "/Chat/GetChatHistory"
const OperationChatGetUserChatRooms = "/Chat/GetUserChatRooms"
const OperationChatSaveChatMessage = "/Chat/SaveChatMessage"

type ChatHTTPServer interface {
	// GetChatHistory 获取聊天历史记录
	GetChatHistory(context.Context, *GetChatHistoryRequest) (*GetChatHistoryReply, error)
	// GetUserChatRooms 获取用户的聊天房间列表
	GetUserChatRooms(context.Context, *GetUserChatRoomsRequest) (*GetUserChatRoomsReply, error)
	// SaveChatMessage 保存聊天消息
	SaveChatMessage(context.Context, *SaveChatMessageRequest) (*SaveChatMessageReply, error)
}

func RegisterChatHTTPServer(s *http.Server, srv ChatHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/chat/history", _Chat_GetChatHistory0_HTTP_Handler(srv))
	r.POST("/v1/chat/message", _Chat_SaveChatMessage0_HTTP_Handler(srv))
	r.GET("/v1/chat/rooms", _Chat_GetUserChatRooms0_HTTP_Handler(srv))
}

func _Chat_GetChatHistory0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetChatHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatGetChatHistory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetChatHistory(ctx, req.(*GetChatHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetChatHistoryReply)
		return ctx.Result(200, reply)
	}
}

func _Chat_SaveChatMessage0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveChatMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatSaveChatMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveChatMessage(ctx, req.(*SaveChatMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveChatMessageReply)
		return ctx.Result(200, reply)
	}
}

func _Chat_GetUserChatRooms0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserChatRoomsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatGetUserChatRooms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserChatRooms(ctx, req.(*GetUserChatRoomsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserChatRoomsReply)
		return ctx.Result(200, reply)
	}
}

type ChatHTTPClient interface {
	GetChatHistory(ctx context.Context, req *GetChatHistoryRequest, opts ...http.CallOption) (rsp *GetChatHistoryReply, err error)
	GetUserChatRooms(ctx context.Context, req *GetUserChatRoomsRequest, opts ...http.CallOption) (rsp *GetUserChatRoomsReply, err error)
	SaveChatMessage(ctx context.Context, req *SaveChatMessageRequest, opts ...http.CallOption) (rsp *SaveChatMessageReply, err error)
}

type ChatHTTPClientImpl struct {
	cc *http.Client
}

func NewChatHTTPClient(client *http.Client) ChatHTTPClient {
	return &ChatHTTPClientImpl{client}
}

func (c *ChatHTTPClientImpl) GetChatHistory(ctx context.Context, in *GetChatHistoryRequest, opts ...http.CallOption) (*GetChatHistoryReply, error) {
	var out GetChatHistoryReply
	pattern := "/v1/chat/history"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChatGetChatHistory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ChatHTTPClientImpl) GetUserChatRooms(ctx context.Context, in *GetUserChatRoomsRequest, opts ...http.CallOption) (*GetUserChatRoomsReply, error) {
	var out GetUserChatRoomsReply
	pattern := "/v1/chat/rooms"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChatGetUserChatRooms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ChatHTTPClientImpl) SaveChatMessage(ctx context.Context, in *SaveChatMessageRequest, opts ...http.CallOption) (*SaveChatMessageReply, error) {
	var out SaveChatMessageReply
	pattern := "/v1/chat/message"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChatSaveChatMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
