// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: coupon/v1/coupon.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCouponServiceCalculateAvailableCoupons = "/api.coupon.v1.CouponService/CalculateAvailableCoupons"
const OperationCouponServiceClaimCoupon = "/api.coupon.v1.CouponService/ClaimCoupon"
const OperationCouponServiceGetCouponDetail = "/api.coupon.v1.CouponService/GetCouponDetail"
const OperationCouponServiceListCoupons = "/api.coupon.v1.CouponService/ListCoupons"
const OperationCouponServiceListUserCoupons = "/api.coupon.v1.CouponService/ListUserCoupons"

type CouponServiceHTTPServer interface {
	// CalculateAvailableCoupons 计算订单可用优惠券
	CalculateAvailableCoupons(context.Context, *CalculateAvailableCouponsRequest) (*CalculateAvailableCouponsReply, error)
	// ClaimCoupon 领取优惠券
	ClaimCoupon(context.Context, *ClaimCouponRequest) (*ClaimCouponReply, error)
	// GetCouponDetail 获取优惠券详情和使用规则
	GetCouponDetail(context.Context, *GetCouponDetailRequest) (*GetCouponDetailReply, error)
	// ListCoupons 获取优惠券列表
	ListCoupons(context.Context, *ListCouponsRequest) (*ListCouponsReply, error)
	// ListUserCoupons 获取用户优惠券列表
	ListUserCoupons(context.Context, *ListUserCouponsRequest) (*ListUserCouponsReply, error)
}

func RegisterCouponServiceHTTPServer(s *http.Server, srv CouponServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/coupons", _CouponService_ListCoupons0_HTTP_Handler(srv))
	r.GET("/api/v1/users/{user_id}/coupons", _CouponService_ListUserCoupons0_HTTP_Handler(srv))
	r.GET("/api/v1/coupons/{coupon_id}", _CouponService_GetCouponDetail0_HTTP_Handler(srv))
	r.POST("/api/v1/coupons/{coupon_id}/claim", _CouponService_ClaimCoupon0_HTTP_Handler(srv))
	r.POST("/api/v1/coupons/calculate", _CouponService_CalculateAvailableCoupons0_HTTP_Handler(srv))
}

func _CouponService_ListCoupons0_HTTP_Handler(srv CouponServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCouponsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCouponServiceListCoupons)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCoupons(ctx, req.(*ListCouponsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCouponsReply)
		return ctx.Result(200, reply)
	}
}

func _CouponService_ListUserCoupons0_HTTP_Handler(srv CouponServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserCouponsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCouponServiceListUserCoupons)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserCoupons(ctx, req.(*ListUserCouponsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserCouponsReply)
		return ctx.Result(200, reply)
	}
}

func _CouponService_GetCouponDetail0_HTTP_Handler(srv CouponServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCouponDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCouponServiceGetCouponDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCouponDetail(ctx, req.(*GetCouponDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCouponDetailReply)
		return ctx.Result(200, reply)
	}
}

func _CouponService_ClaimCoupon0_HTTP_Handler(srv CouponServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ClaimCouponRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCouponServiceClaimCoupon)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClaimCoupon(ctx, req.(*ClaimCouponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ClaimCouponReply)
		return ctx.Result(200, reply)
	}
}

func _CouponService_CalculateAvailableCoupons0_HTTP_Handler(srv CouponServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CalculateAvailableCouponsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCouponServiceCalculateAvailableCoupons)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CalculateAvailableCoupons(ctx, req.(*CalculateAvailableCouponsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CalculateAvailableCouponsReply)
		return ctx.Result(200, reply)
	}
}

type CouponServiceHTTPClient interface {
	CalculateAvailableCoupons(ctx context.Context, req *CalculateAvailableCouponsRequest, opts ...http.CallOption) (rsp *CalculateAvailableCouponsReply, err error)
	ClaimCoupon(ctx context.Context, req *ClaimCouponRequest, opts ...http.CallOption) (rsp *ClaimCouponReply, err error)
	GetCouponDetail(ctx context.Context, req *GetCouponDetailRequest, opts ...http.CallOption) (rsp *GetCouponDetailReply, err error)
	ListCoupons(ctx context.Context, req *ListCouponsRequest, opts ...http.CallOption) (rsp *ListCouponsReply, err error)
	ListUserCoupons(ctx context.Context, req *ListUserCouponsRequest, opts ...http.CallOption) (rsp *ListUserCouponsReply, err error)
}

type CouponServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCouponServiceHTTPClient(client *http.Client) CouponServiceHTTPClient {
	return &CouponServiceHTTPClientImpl{client}
}

func (c *CouponServiceHTTPClientImpl) CalculateAvailableCoupons(ctx context.Context, in *CalculateAvailableCouponsRequest, opts ...http.CallOption) (*CalculateAvailableCouponsReply, error) {
	var out CalculateAvailableCouponsReply
	pattern := "/api/v1/coupons/calculate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCouponServiceCalculateAvailableCoupons))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CouponServiceHTTPClientImpl) ClaimCoupon(ctx context.Context, in *ClaimCouponRequest, opts ...http.CallOption) (*ClaimCouponReply, error) {
	var out ClaimCouponReply
	pattern := "/api/v1/coupons/{coupon_id}/claim"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCouponServiceClaimCoupon))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CouponServiceHTTPClientImpl) GetCouponDetail(ctx context.Context, in *GetCouponDetailRequest, opts ...http.CallOption) (*GetCouponDetailReply, error) {
	var out GetCouponDetailReply
	pattern := "/api/v1/coupons/{coupon_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCouponServiceGetCouponDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CouponServiceHTTPClientImpl) ListCoupons(ctx context.Context, in *ListCouponsRequest, opts ...http.CallOption) (*ListCouponsReply, error) {
	var out ListCouponsReply
	pattern := "/api/v1/coupons"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCouponServiceListCoupons))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CouponServiceHTTPClientImpl) ListUserCoupons(ctx context.Context, in *ListUserCouponsRequest, opts ...http.CallOption) (*ListUserCouponsReply, error) {
	var out ListUserCouponsReply
	pattern := "/api/v1/users/{user_id}/coupons"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCouponServiceListUserCoupons))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
