// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: coupon/v1/coupon.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CouponService_ListCoupons_FullMethodName               = "/api.coupon.v1.CouponService/ListCoupons"
	CouponService_ListUserCoupons_FullMethodName           = "/api.coupon.v1.CouponService/ListUserCoupons"
	CouponService_GetCouponDetail_FullMethodName           = "/api.coupon.v1.CouponService/GetCouponDetail"
	CouponService_ClaimCoupon_FullMethodName               = "/api.coupon.v1.CouponService/ClaimCoupon"
	CouponService_CalculateAvailableCoupons_FullMethodName = "/api.coupon.v1.CouponService/CalculateAvailableCoupons"
)

// CouponServiceClient is the client API for CouponService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 优惠券服务
type CouponServiceClient interface {
	// 获取优惠券列表
	ListCoupons(ctx context.Context, in *ListCouponsRequest, opts ...grpc.CallOption) (*ListCouponsReply, error)
	// 获取用户优惠券列表
	ListUserCoupons(ctx context.Context, in *ListUserCouponsRequest, opts ...grpc.CallOption) (*ListUserCouponsReply, error)
	// 获取优惠券详情和使用规则
	GetCouponDetail(ctx context.Context, in *GetCouponDetailRequest, opts ...grpc.CallOption) (*GetCouponDetailReply, error)
	// 领取优惠券
	ClaimCoupon(ctx context.Context, in *ClaimCouponRequest, opts ...grpc.CallOption) (*ClaimCouponReply, error)
	// 计算订单可用优惠券
	CalculateAvailableCoupons(ctx context.Context, in *CalculateAvailableCouponsRequest, opts ...grpc.CallOption) (*CalculateAvailableCouponsReply, error)
}

type couponServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponServiceClient(cc grpc.ClientConnInterface) CouponServiceClient {
	return &couponServiceClient{cc}
}

func (c *couponServiceClient) ListCoupons(ctx context.Context, in *ListCouponsRequest, opts ...grpc.CallOption) (*ListCouponsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCouponsReply)
	err := c.cc.Invoke(ctx, CouponService_ListCoupons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) ListUserCoupons(ctx context.Context, in *ListUserCouponsRequest, opts ...grpc.CallOption) (*ListUserCouponsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserCouponsReply)
	err := c.cc.Invoke(ctx, CouponService_ListUserCoupons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) GetCouponDetail(ctx context.Context, in *GetCouponDetailRequest, opts ...grpc.CallOption) (*GetCouponDetailReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCouponDetailReply)
	err := c.cc.Invoke(ctx, CouponService_GetCouponDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) ClaimCoupon(ctx context.Context, in *ClaimCouponRequest, opts ...grpc.CallOption) (*ClaimCouponReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimCouponReply)
	err := c.cc.Invoke(ctx, CouponService_ClaimCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) CalculateAvailableCoupons(ctx context.Context, in *CalculateAvailableCouponsRequest, opts ...grpc.CallOption) (*CalculateAvailableCouponsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateAvailableCouponsReply)
	err := c.cc.Invoke(ctx, CouponService_CalculateAvailableCoupons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponServiceServer is the server API for CouponService service.
// All implementations must embed UnimplementedCouponServiceServer
// for forward compatibility.
//
// 优惠券服务
type CouponServiceServer interface {
	// 获取优惠券列表
	ListCoupons(context.Context, *ListCouponsRequest) (*ListCouponsReply, error)
	// 获取用户优惠券列表
	ListUserCoupons(context.Context, *ListUserCouponsRequest) (*ListUserCouponsReply, error)
	// 获取优惠券详情和使用规则
	GetCouponDetail(context.Context, *GetCouponDetailRequest) (*GetCouponDetailReply, error)
	// 领取优惠券
	ClaimCoupon(context.Context, *ClaimCouponRequest) (*ClaimCouponReply, error)
	// 计算订单可用优惠券
	CalculateAvailableCoupons(context.Context, *CalculateAvailableCouponsRequest) (*CalculateAvailableCouponsReply, error)
	mustEmbedUnimplementedCouponServiceServer()
}

// UnimplementedCouponServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCouponServiceServer struct{}

func (UnimplementedCouponServiceServer) ListCoupons(context.Context, *ListCouponsRequest) (*ListCouponsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoupons not implemented")
}
func (UnimplementedCouponServiceServer) ListUserCoupons(context.Context, *ListUserCouponsRequest) (*ListUserCouponsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserCoupons not implemented")
}
func (UnimplementedCouponServiceServer) GetCouponDetail(context.Context, *GetCouponDetailRequest) (*GetCouponDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouponDetail not implemented")
}
func (UnimplementedCouponServiceServer) ClaimCoupon(context.Context, *ClaimCouponRequest) (*ClaimCouponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimCoupon not implemented")
}
func (UnimplementedCouponServiceServer) CalculateAvailableCoupons(context.Context, *CalculateAvailableCouponsRequest) (*CalculateAvailableCouponsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateAvailableCoupons not implemented")
}
func (UnimplementedCouponServiceServer) mustEmbedUnimplementedCouponServiceServer() {}
func (UnimplementedCouponServiceServer) testEmbeddedByValue()                       {}

// UnsafeCouponServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponServiceServer will
// result in compilation errors.
type UnsafeCouponServiceServer interface {
	mustEmbedUnimplementedCouponServiceServer()
}

func RegisterCouponServiceServer(s grpc.ServiceRegistrar, srv CouponServiceServer) {
	// If the following call pancis, it indicates UnimplementedCouponServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CouponService_ServiceDesc, srv)
}

func _CouponService_ListCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCouponsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).ListCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_ListCoupons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).ListCoupons(ctx, req.(*ListCouponsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_ListUserCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserCouponsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).ListUserCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_ListUserCoupons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).ListUserCoupons(ctx, req.(*ListUserCouponsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_GetCouponDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).GetCouponDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_GetCouponDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).GetCouponDetail(ctx, req.(*GetCouponDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_ClaimCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).ClaimCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_ClaimCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).ClaimCoupon(ctx, req.(*ClaimCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_CalculateAvailableCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateAvailableCouponsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).CalculateAvailableCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_CalculateAvailableCoupons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).CalculateAvailableCoupons(ctx, req.(*CalculateAvailableCouponsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CouponService_ServiceDesc is the grpc.ServiceDesc for CouponService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CouponService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.coupon.v1.CouponService",
	HandlerType: (*CouponServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCoupons",
			Handler:    _CouponService_ListCoupons_Handler,
		},
		{
			MethodName: "ListUserCoupons",
			Handler:    _CouponService_ListUserCoupons_Handler,
		},
		{
			MethodName: "GetCouponDetail",
			Handler:    _CouponService_GetCouponDetail_Handler,
		},
		{
			MethodName: "ClaimCoupon",
			Handler:    _CouponService_ClaimCoupon_Handler,
		},
		{
			MethodName: "CalculateAvailableCoupons",
			Handler:    _CouponService_CalculateAvailableCoupons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coupon/v1/coupon.proto",
}
