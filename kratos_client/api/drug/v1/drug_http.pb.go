// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: drug/v1/drug.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDrugGetDrug = "/drug.v1.Drug/GetDrug"
const OperationDrugGetExplain = "/drug.v1.Drug/GetExplain"
const OperationDrugGetGuide = "/drug.v1.Drug/GetGuide"
const OperationDrugListDrug = "/drug.v1.Drug/ListDrug"

type DrugHTTPServer interface {
	GetDrug(context.Context, *GetDrugRequest) (*GetDrugReply, error)
	GetExplain(context.Context, *GetExplainRequest) (*GetExplainReply, error)
	GetGuide(context.Context, *GetGuideRequest) (*GetGuideReply, error)
	ListDrug(context.Context, *ListDrugRequest) (*ListDrugReply, error)
}

func RegisterDrugHTTPServer(s *http.Server, srv DrugHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/drug", _Drug_GetDrug0_HTTP_Handler(srv))
	r.POST("/v1/drug/list", _Drug_ListDrug0_HTTP_Handler(srv))
	r.POST("/v1/drug/explain", _Drug_GetExplain0_HTTP_Handler(srv))
	r.POST("/v1/drug/guide", _Drug_GetGuide0_HTTP_Handler(srv))
}

func _Drug_GetDrug0_HTTP_Handler(srv DrugHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDrugRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDrugGetDrug)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDrug(ctx, req.(*GetDrugRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDrugReply)
		return ctx.Result(200, reply)
	}
}

func _Drug_ListDrug0_HTTP_Handler(srv DrugHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDrugRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDrugListDrug)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDrug(ctx, req.(*ListDrugRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDrugReply)
		return ctx.Result(200, reply)
	}
}

func _Drug_GetExplain0_HTTP_Handler(srv DrugHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetExplainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDrugGetExplain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExplain(ctx, req.(*GetExplainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetExplainReply)
		return ctx.Result(200, reply)
	}
}

func _Drug_GetGuide0_HTTP_Handler(srv DrugHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGuideRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDrugGetGuide)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGuide(ctx, req.(*GetGuideRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGuideReply)
		return ctx.Result(200, reply)
	}
}

type DrugHTTPClient interface {
	GetDrug(ctx context.Context, req *GetDrugRequest, opts ...http.CallOption) (rsp *GetDrugReply, err error)
	GetExplain(ctx context.Context, req *GetExplainRequest, opts ...http.CallOption) (rsp *GetExplainReply, err error)
	GetGuide(ctx context.Context, req *GetGuideRequest, opts ...http.CallOption) (rsp *GetGuideReply, err error)
	ListDrug(ctx context.Context, req *ListDrugRequest, opts ...http.CallOption) (rsp *ListDrugReply, err error)
}

type DrugHTTPClientImpl struct {
	cc *http.Client
}

func NewDrugHTTPClient(client *http.Client) DrugHTTPClient {
	return &DrugHTTPClientImpl{client}
}

func (c *DrugHTTPClientImpl) GetDrug(ctx context.Context, in *GetDrugRequest, opts ...http.CallOption) (*GetDrugReply, error) {
	var out GetDrugReply
	pattern := "/v1/drug"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDrugGetDrug))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DrugHTTPClientImpl) GetExplain(ctx context.Context, in *GetExplainRequest, opts ...http.CallOption) (*GetExplainReply, error) {
	var out GetExplainReply
	pattern := "/v1/drug/explain"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDrugGetExplain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DrugHTTPClientImpl) GetGuide(ctx context.Context, in *GetGuideRequest, opts ...http.CallOption) (*GetGuideReply, error) {
	var out GetGuideReply
	pattern := "/v1/drug/guide"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDrugGetGuide))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DrugHTTPClientImpl) ListDrug(ctx context.Context, in *ListDrugRequest, opts ...http.CallOption) (*ListDrugReply, error) {
	var out ListDrugReply
	pattern := "/v1/drug/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDrugListDrug))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
