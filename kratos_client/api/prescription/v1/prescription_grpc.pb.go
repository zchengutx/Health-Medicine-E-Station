// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: prescription/v1/prescription.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PrescriptionService_ListPrescriptions_FullMethodName        = "/api.prescription.v1.PrescriptionService/ListPrescriptions"
	PrescriptionService_ListPatientPrescriptions_FullMethodName = "/api.prescription.v1.PrescriptionService/ListPatientPrescriptions"
	PrescriptionService_ListDoctorPrescriptions_FullMethodName  = "/api.prescription.v1.PrescriptionService/ListDoctorPrescriptions"
	PrescriptionService_GetPrescriptionDetail_FullMethodName    = "/api.prescription.v1.PrescriptionService/GetPrescriptionDetail"
)

// PrescriptionServiceClient is the client API for PrescriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 处方服务
type PrescriptionServiceClient interface {
	// 获取处方列表
	ListPrescriptions(ctx context.Context, in *ListPrescriptionsRequest, opts ...grpc.CallOption) (*ListPrescriptionsReply, error)
	// 获取患者处方列表
	ListPatientPrescriptions(ctx context.Context, in *ListPatientPrescriptionsRequest, opts ...grpc.CallOption) (*ListPatientPrescriptionsReply, error)
	// 获取医生处方列表
	ListDoctorPrescriptions(ctx context.Context, in *ListDoctorPrescriptionsRequest, opts ...grpc.CallOption) (*ListDoctorPrescriptionsReply, error)
	// 获取处方详情
	GetPrescriptionDetail(ctx context.Context, in *GetPrescriptionDetailRequest, opts ...grpc.CallOption) (*GetPrescriptionDetailReply, error)
}

type prescriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrescriptionServiceClient(cc grpc.ClientConnInterface) PrescriptionServiceClient {
	return &prescriptionServiceClient{cc}
}

func (c *prescriptionServiceClient) ListPrescriptions(ctx context.Context, in *ListPrescriptionsRequest, opts ...grpc.CallOption) (*ListPrescriptionsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrescriptionsReply)
	err := c.cc.Invoke(ctx, PrescriptionService_ListPrescriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prescriptionServiceClient) ListPatientPrescriptions(ctx context.Context, in *ListPatientPrescriptionsRequest, opts ...grpc.CallOption) (*ListPatientPrescriptionsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPatientPrescriptionsReply)
	err := c.cc.Invoke(ctx, PrescriptionService_ListPatientPrescriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prescriptionServiceClient) ListDoctorPrescriptions(ctx context.Context, in *ListDoctorPrescriptionsRequest, opts ...grpc.CallOption) (*ListDoctorPrescriptionsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDoctorPrescriptionsReply)
	err := c.cc.Invoke(ctx, PrescriptionService_ListDoctorPrescriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prescriptionServiceClient) GetPrescriptionDetail(ctx context.Context, in *GetPrescriptionDetailRequest, opts ...grpc.CallOption) (*GetPrescriptionDetailReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPrescriptionDetailReply)
	err := c.cc.Invoke(ctx, PrescriptionService_GetPrescriptionDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrescriptionServiceServer is the server API for PrescriptionService service.
// All implementations must embed UnimplementedPrescriptionServiceServer
// for forward compatibility.
//
// 处方服务
type PrescriptionServiceServer interface {
	// 获取处方列表
	ListPrescriptions(context.Context, *ListPrescriptionsRequest) (*ListPrescriptionsReply, error)
	// 获取患者处方列表
	ListPatientPrescriptions(context.Context, *ListPatientPrescriptionsRequest) (*ListPatientPrescriptionsReply, error)
	// 获取医生处方列表
	ListDoctorPrescriptions(context.Context, *ListDoctorPrescriptionsRequest) (*ListDoctorPrescriptionsReply, error)
	// 获取处方详情
	GetPrescriptionDetail(context.Context, *GetPrescriptionDetailRequest) (*GetPrescriptionDetailReply, error)
	mustEmbedUnimplementedPrescriptionServiceServer()
}

// UnimplementedPrescriptionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPrescriptionServiceServer struct{}

func (UnimplementedPrescriptionServiceServer) ListPrescriptions(context.Context, *ListPrescriptionsRequest) (*ListPrescriptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrescriptions not implemented")
}
func (UnimplementedPrescriptionServiceServer) ListPatientPrescriptions(context.Context, *ListPatientPrescriptionsRequest) (*ListPatientPrescriptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPatientPrescriptions not implemented")
}
func (UnimplementedPrescriptionServiceServer) ListDoctorPrescriptions(context.Context, *ListDoctorPrescriptionsRequest) (*ListDoctorPrescriptionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDoctorPrescriptions not implemented")
}
func (UnimplementedPrescriptionServiceServer) GetPrescriptionDetail(context.Context, *GetPrescriptionDetailRequest) (*GetPrescriptionDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrescriptionDetail not implemented")
}
func (UnimplementedPrescriptionServiceServer) mustEmbedUnimplementedPrescriptionServiceServer() {}
func (UnimplementedPrescriptionServiceServer) testEmbeddedByValue()                             {}

// UnsafePrescriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrescriptionServiceServer will
// result in compilation errors.
type UnsafePrescriptionServiceServer interface {
	mustEmbedUnimplementedPrescriptionServiceServer()
}

func RegisterPrescriptionServiceServer(s grpc.ServiceRegistrar, srv PrescriptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedPrescriptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PrescriptionService_ServiceDesc, srv)
}

func _PrescriptionService_ListPrescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrescriptionServiceServer).ListPrescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrescriptionService_ListPrescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrescriptionServiceServer).ListPrescriptions(ctx, req.(*ListPrescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrescriptionService_ListPatientPrescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPatientPrescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrescriptionServiceServer).ListPatientPrescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrescriptionService_ListPatientPrescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrescriptionServiceServer).ListPatientPrescriptions(ctx, req.(*ListPatientPrescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrescriptionService_ListDoctorPrescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDoctorPrescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrescriptionServiceServer).ListDoctorPrescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrescriptionService_ListDoctorPrescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrescriptionServiceServer).ListDoctorPrescriptions(ctx, req.(*ListDoctorPrescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrescriptionService_GetPrescriptionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrescriptionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrescriptionServiceServer).GetPrescriptionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrescriptionService_GetPrescriptionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrescriptionServiceServer).GetPrescriptionDetail(ctx, req.(*GetPrescriptionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrescriptionService_ServiceDesc is the grpc.ServiceDesc for PrescriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrescriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.prescription.v1.PrescriptionService",
	HandlerType: (*PrescriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPrescriptions",
			Handler:    _PrescriptionService_ListPrescriptions_Handler,
		},
		{
			MethodName: "ListPatientPrescriptions",
			Handler:    _PrescriptionService_ListPatientPrescriptions_Handler,
		},
		{
			MethodName: "ListDoctorPrescriptions",
			Handler:    _PrescriptionService_ListDoctorPrescriptions_Handler,
		},
		{
			MethodName: "GetPrescriptionDetail",
			Handler:    _PrescriptionService_GetPrescriptionDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prescription/v1/prescription.proto",
}
