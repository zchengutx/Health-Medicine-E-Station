// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: prescription/v1/prescription.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPrescriptionServiceGetPrescriptionDetail = "/api.prescription.v1.PrescriptionService/GetPrescriptionDetail"
const OperationPrescriptionServiceListDoctorPrescriptions = "/api.prescription.v1.PrescriptionService/ListDoctorPrescriptions"
const OperationPrescriptionServiceListPatientPrescriptions = "/api.prescription.v1.PrescriptionService/ListPatientPrescriptions"
const OperationPrescriptionServiceListPrescriptions = "/api.prescription.v1.PrescriptionService/ListPrescriptions"

type PrescriptionServiceHTTPServer interface {
	// GetPrescriptionDetail 获取处方详情
	GetPrescriptionDetail(context.Context, *GetPrescriptionDetailRequest) (*GetPrescriptionDetailReply, error)
	// ListDoctorPrescriptions 获取医生处方列表
	ListDoctorPrescriptions(context.Context, *ListDoctorPrescriptionsRequest) (*ListDoctorPrescriptionsReply, error)
	// ListPatientPrescriptions 获取患者处方列表
	ListPatientPrescriptions(context.Context, *ListPatientPrescriptionsRequest) (*ListPatientPrescriptionsReply, error)
	// ListPrescriptions 获取处方列表
	ListPrescriptions(context.Context, *ListPrescriptionsRequest) (*ListPrescriptionsReply, error)
}

func RegisterPrescriptionServiceHTTPServer(s *http.Server, srv PrescriptionServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/prescriptions", _PrescriptionService_ListPrescriptions1_HTTP_Handler(srv))
	r.GET("/api/v1/patients/{patient_id}/prescriptions", _PrescriptionService_ListPatientPrescriptions0_HTTP_Handler(srv))
	r.GET("/api/v1/doctors/{doctor_id}/prescriptions", _PrescriptionService_ListDoctorPrescriptions0_HTTP_Handler(srv))
	r.GET("/api/v1/prescriptions/{prescription_id}", _PrescriptionService_GetPrescriptionDetail0_HTTP_Handler(srv))
}

func _PrescriptionService_ListPrescriptions1_HTTP_Handler(srv PrescriptionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPrescriptionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrescriptionServiceListPrescriptions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPrescriptions(ctx, req.(*ListPrescriptionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPrescriptionsReply)
		return ctx.Result(200, reply)
	}
}

func _PrescriptionService_ListPatientPrescriptions0_HTTP_Handler(srv PrescriptionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPatientPrescriptionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrescriptionServiceListPatientPrescriptions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPatientPrescriptions(ctx, req.(*ListPatientPrescriptionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPatientPrescriptionsReply)
		return ctx.Result(200, reply)
	}
}

func _PrescriptionService_ListDoctorPrescriptions0_HTTP_Handler(srv PrescriptionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDoctorPrescriptionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrescriptionServiceListDoctorPrescriptions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDoctorPrescriptions(ctx, req.(*ListDoctorPrescriptionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDoctorPrescriptionsReply)
		return ctx.Result(200, reply)
	}
}

func _PrescriptionService_GetPrescriptionDetail0_HTTP_Handler(srv PrescriptionServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPrescriptionDetailRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPrescriptionServiceGetPrescriptionDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPrescriptionDetail(ctx, req.(*GetPrescriptionDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPrescriptionDetailReply)
		return ctx.Result(200, reply)
	}
}

type PrescriptionServiceHTTPClient interface {
	GetPrescriptionDetail(ctx context.Context, req *GetPrescriptionDetailRequest, opts ...http.CallOption) (rsp *GetPrescriptionDetailReply, err error)
	ListDoctorPrescriptions(ctx context.Context, req *ListDoctorPrescriptionsRequest, opts ...http.CallOption) (rsp *ListDoctorPrescriptionsReply, err error)
	ListPatientPrescriptions(ctx context.Context, req *ListPatientPrescriptionsRequest, opts ...http.CallOption) (rsp *ListPatientPrescriptionsReply, err error)
	ListPrescriptions(ctx context.Context, req *ListPrescriptionsRequest, opts ...http.CallOption) (rsp *ListPrescriptionsReply, err error)
}

type PrescriptionServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPrescriptionServiceHTTPClient(client *http.Client) PrescriptionServiceHTTPClient {
	return &PrescriptionServiceHTTPClientImpl{client}
}

func (c *PrescriptionServiceHTTPClientImpl) GetPrescriptionDetail(ctx context.Context, in *GetPrescriptionDetailRequest, opts ...http.CallOption) (*GetPrescriptionDetailReply, error) {
	var out GetPrescriptionDetailReply
	pattern := "/api/v1/prescriptions/{prescription_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPrescriptionServiceGetPrescriptionDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrescriptionServiceHTTPClientImpl) ListDoctorPrescriptions(ctx context.Context, in *ListDoctorPrescriptionsRequest, opts ...http.CallOption) (*ListDoctorPrescriptionsReply, error) {
	var out ListDoctorPrescriptionsReply
	pattern := "/api/v1/doctors/{doctor_id}/prescriptions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPrescriptionServiceListDoctorPrescriptions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrescriptionServiceHTTPClientImpl) ListPatientPrescriptions(ctx context.Context, in *ListPatientPrescriptionsRequest, opts ...http.CallOption) (*ListPatientPrescriptionsReply, error) {
	var out ListPatientPrescriptionsReply
	pattern := "/api/v1/patients/{patient_id}/prescriptions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPrescriptionServiceListPatientPrescriptions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PrescriptionServiceHTTPClientImpl) ListPrescriptions(ctx context.Context, in *ListPrescriptionsRequest, opts ...http.CallOption) (*ListPrescriptionsReply, error) {
	var out ListPrescriptionsReply
	pattern := "/api/v1/prescriptions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPrescriptionServiceListPrescriptions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
