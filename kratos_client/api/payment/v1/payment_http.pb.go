// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: payment/v1/payment.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPaymentCreatePayment = "/api.payment.v1.Payment/CreatePayment"
const OperationPaymentPaymentNotify = "/api.payment.v1.Payment/PaymentNotify"
const OperationPaymentPaymentReturn = "/api.payment.v1.Payment/PaymentReturn"
const OperationPaymentQueryPayment = "/api.payment.v1.Payment/QueryPayment"

type PaymentHTTPServer interface {
	// CreatePayment 创建支付订单
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentReply, error)
	// PaymentNotify 支付回调通知
	PaymentNotify(context.Context, *PaymentNotifyRequest) (*PaymentNotifyReply, error)
	// PaymentReturn 支付返回页面
	PaymentReturn(context.Context, *PaymentReturnRequest) (*PaymentReturnReply, error)
	// QueryPayment 支付结果查询
	QueryPayment(context.Context, *QueryPaymentRequest) (*QueryPaymentReply, error)
}

func RegisterPaymentHTTPServer(s *http.Server, srv PaymentHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/payment/create", _Payment_CreatePayment0_HTTP_Handler(srv))
	r.POST("/v1/payment/notify", _Payment_PaymentNotify0_HTTP_Handler(srv))
	r.GET("/v1/payment/query", _Payment_QueryPayment0_HTTP_Handler(srv))
	r.GET("/v1/payment/return", _Payment_PaymentReturn0_HTTP_Handler(srv))
}

func _Payment_CreatePayment0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePaymentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentCreatePayment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePayment(ctx, req.(*CreatePaymentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePaymentReply)
		return ctx.Result(200, reply)
	}
}

func _Payment_PaymentNotify0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PaymentNotifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentPaymentNotify)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PaymentNotify(ctx, req.(*PaymentNotifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PaymentNotifyReply)
		return ctx.Result(200, reply)
	}
}

func _Payment_QueryPayment0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueryPaymentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentQueryPayment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QueryPayment(ctx, req.(*QueryPaymentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueryPaymentReply)
		return ctx.Result(200, reply)
	}
}

func _Payment_PaymentReturn0_HTTP_Handler(srv PaymentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PaymentReturnRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPaymentPaymentReturn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PaymentReturn(ctx, req.(*PaymentReturnRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PaymentReturnReply)
		return ctx.Result(200, reply)
	}
}

type PaymentHTTPClient interface {
	CreatePayment(ctx context.Context, req *CreatePaymentRequest, opts ...http.CallOption) (rsp *CreatePaymentReply, err error)
	PaymentNotify(ctx context.Context, req *PaymentNotifyRequest, opts ...http.CallOption) (rsp *PaymentNotifyReply, err error)
	PaymentReturn(ctx context.Context, req *PaymentReturnRequest, opts ...http.CallOption) (rsp *PaymentReturnReply, err error)
	QueryPayment(ctx context.Context, req *QueryPaymentRequest, opts ...http.CallOption) (rsp *QueryPaymentReply, err error)
}

type PaymentHTTPClientImpl struct {
	cc *http.Client
}

func NewPaymentHTTPClient(client *http.Client) PaymentHTTPClient {
	return &PaymentHTTPClientImpl{client}
}

func (c *PaymentHTTPClientImpl) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...http.CallOption) (*CreatePaymentReply, error) {
	var out CreatePaymentReply
	pattern := "/v1/payment/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentCreatePayment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) PaymentNotify(ctx context.Context, in *PaymentNotifyRequest, opts ...http.CallOption) (*PaymentNotifyReply, error) {
	var out PaymentNotifyReply
	pattern := "/v1/payment/notify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPaymentPaymentNotify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) PaymentReturn(ctx context.Context, in *PaymentReturnRequest, opts ...http.CallOption) (*PaymentReturnReply, error) {
	var out PaymentReturnReply
	pattern := "/v1/payment/return"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPaymentPaymentReturn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *PaymentHTTPClientImpl) QueryPayment(ctx context.Context, in *QueryPaymentRequest, opts ...http.CallOption) (*QueryPaymentReply, error) {
	var out QueryPaymentReply
	pattern := "/v1/payment/query"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPaymentQueryPayment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
