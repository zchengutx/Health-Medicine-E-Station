// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: payment/v1/payment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Payment_CreatePayment_FullMethodName = "/api.payment.v1.Payment/CreatePayment"
	Payment_PaymentNotify_FullMethodName = "/api.payment.v1.Payment/PaymentNotify"
	Payment_QueryPayment_FullMethodName  = "/api.payment.v1.Payment/QueryPayment"
	Payment_PaymentReturn_FullMethodName = "/api.payment.v1.Payment/PaymentReturn"
)

// PaymentClient is the client API for Payment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 支付服务
type PaymentClient interface {
	// 创建支付订单
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentReply, error)
	// 支付回调通知
	PaymentNotify(ctx context.Context, in *PaymentNotifyRequest, opts ...grpc.CallOption) (*PaymentNotifyReply, error)
	// 支付结果查询
	QueryPayment(ctx context.Context, in *QueryPaymentRequest, opts ...grpc.CallOption) (*QueryPaymentReply, error)
	// 支付返回页面
	PaymentReturn(ctx context.Context, in *PaymentReturnRequest, opts ...grpc.CallOption) (*PaymentReturnReply, error)
}

type paymentClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentClient(cc grpc.ClientConnInterface) PaymentClient {
	return &paymentClient{cc}
}

func (c *paymentClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentReply)
	err := c.cc.Invoke(ctx, Payment_CreatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) PaymentNotify(ctx context.Context, in *PaymentNotifyRequest, opts ...grpc.CallOption) (*PaymentNotifyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentNotifyReply)
	err := c.cc.Invoke(ctx, Payment_PaymentNotify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) QueryPayment(ctx context.Context, in *QueryPaymentRequest, opts ...grpc.CallOption) (*QueryPaymentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPaymentReply)
	err := c.cc.Invoke(ctx, Payment_QueryPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentClient) PaymentReturn(ctx context.Context, in *PaymentReturnRequest, opts ...grpc.CallOption) (*PaymentReturnReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentReturnReply)
	err := c.cc.Invoke(ctx, Payment_PaymentReturn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServer is the server API for Payment service.
// All implementations must embed UnimplementedPaymentServer
// for forward compatibility.
//
// 支付服务
type PaymentServer interface {
	// 创建支付订单
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentReply, error)
	// 支付回调通知
	PaymentNotify(context.Context, *PaymentNotifyRequest) (*PaymentNotifyReply, error)
	// 支付结果查询
	QueryPayment(context.Context, *QueryPaymentRequest) (*QueryPaymentReply, error)
	// 支付返回页面
	PaymentReturn(context.Context, *PaymentReturnRequest) (*PaymentReturnReply, error)
	mustEmbedUnimplementedPaymentServer()
}

// UnimplementedPaymentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServer struct{}

func (UnimplementedPaymentServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedPaymentServer) PaymentNotify(context.Context, *PaymentNotifyRequest) (*PaymentNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentNotify not implemented")
}
func (UnimplementedPaymentServer) QueryPayment(context.Context, *QueryPaymentRequest) (*QueryPaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPayment not implemented")
}
func (UnimplementedPaymentServer) PaymentReturn(context.Context, *PaymentReturnRequest) (*PaymentReturnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentReturn not implemented")
}
func (UnimplementedPaymentServer) mustEmbedUnimplementedPaymentServer() {}
func (UnimplementedPaymentServer) testEmbeddedByValue()                 {}

// UnsafePaymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServer will
// result in compilation errors.
type UnsafePaymentServer interface {
	mustEmbedUnimplementedPaymentServer()
}

func RegisterPaymentServer(s grpc.ServiceRegistrar, srv PaymentServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Payment_ServiceDesc, srv)
}

func _Payment_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_CreatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_PaymentNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).PaymentNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_PaymentNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).PaymentNotify(ctx, req.(*PaymentNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_QueryPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).QueryPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_QueryPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).QueryPayment(ctx, req.(*QueryPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Payment_PaymentReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServer).PaymentReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Payment_PaymentReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServer).PaymentReturn(ctx, req.(*PaymentReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Payment_ServiceDesc is the grpc.ServiceDesc for Payment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Payment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.payment.v1.Payment",
	HandlerType: (*PaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePayment",
			Handler:    _Payment_CreatePayment_Handler,
		},
		{
			MethodName: "PaymentNotify",
			Handler:    _Payment_PaymentNotify_Handler,
		},
		{
			MethodName: "QueryPayment",
			Handler:    _Payment_QueryPayment_Handler,
		},
		{
			MethodName: "PaymentReturn",
			Handler:    _Payment_PaymentReturn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/payment.proto",
}
