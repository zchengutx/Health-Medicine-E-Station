// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: cart/v1/cart.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCartCreateCart = "/api.cart.v1.Cart/CreateCart"
const OperationCartDeleteCart = "/api.cart.v1.Cart/DeleteCart"
const OperationCartListCart = "/api.cart.v1.Cart/ListCart"
const OperationCartUpdateCart = "/api.cart.v1.Cart/UpdateCart"

type CartHTTPServer interface {
	CreateCart(context.Context, *CreateCartRequest) (*CreateCartReply, error)
	DeleteCart(context.Context, *DeleteCartRequest) (*DeleteCartReply, error)
	ListCart(context.Context, *ListCartRequest) (*ListCartReply, error)
	UpdateCart(context.Context, *UpdateCartRequest) (*UpdateCartReply, error)
}

func RegisterCartHTTPServer(s *http.Server, srv CartHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/cart/create", _Cart_CreateCart0_HTTP_Handler(srv))
	r.POST("/v1/cart/update", _Cart_UpdateCart0_HTTP_Handler(srv))
	r.POST("/v1/cart/delete", _Cart_DeleteCart0_HTTP_Handler(srv))
	r.POST("/v1/cart/list", _Cart_ListCart0_HTTP_Handler(srv))
}

func _Cart_CreateCart0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartCreateCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCart(ctx, req.(*CreateCartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCartReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_UpdateCart0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartUpdateCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCart(ctx, req.(*UpdateCartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCartReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_DeleteCart0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartDeleteCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCart(ctx, req.(*DeleteCartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCartReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_ListCart0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartListCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCart(ctx, req.(*ListCartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCartReply)
		return ctx.Result(200, reply)
	}
}

type CartHTTPClient interface {
	CreateCart(ctx context.Context, req *CreateCartRequest, opts ...http.CallOption) (rsp *CreateCartReply, err error)
	DeleteCart(ctx context.Context, req *DeleteCartRequest, opts ...http.CallOption) (rsp *DeleteCartReply, err error)
	ListCart(ctx context.Context, req *ListCartRequest, opts ...http.CallOption) (rsp *ListCartReply, err error)
	UpdateCart(ctx context.Context, req *UpdateCartRequest, opts ...http.CallOption) (rsp *UpdateCartReply, err error)
}

type CartHTTPClientImpl struct {
	cc *http.Client
}

func NewCartHTTPClient(client *http.Client) CartHTTPClient {
	return &CartHTTPClientImpl{client}
}

func (c *CartHTTPClientImpl) CreateCart(ctx context.Context, in *CreateCartRequest, opts ...http.CallOption) (*CreateCartReply, error) {
	var out CreateCartReply
	pattern := "/v1/cart/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartCreateCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) DeleteCart(ctx context.Context, in *DeleteCartRequest, opts ...http.CallOption) (*DeleteCartReply, error) {
	var out DeleteCartReply
	pattern := "/v1/cart/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartDeleteCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) ListCart(ctx context.Context, in *ListCartRequest, opts ...http.CallOption) (*ListCartReply, error) {
	var out ListCartReply
	pattern := "/v1/cart/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartListCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) UpdateCart(ctx context.Context, in *UpdateCartRequest, opts ...http.CallOption) (*UpdateCartReply, error) {
	var out UpdateCartReply
	pattern := "/v1/cart/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartUpdateCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
