// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: estimate/v1/estimate.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Estimate_CreateEstimate_FullMethodName   = "/Estimate/CreateEstimate"
	Estimate_DeleteEstimate_FullMethodName   = "/Estimate/DeleteEstimate"
	Estimate_GetEstimate_FullMethodName      = "/Estimate/GetEstimate"
	Estimate_ListDrugEstimate_FullMethodName = "/Estimate/ListDrugEstimate"
)

// EstimateClient is the client API for Estimate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstimateClient interface {
	CreateEstimate(ctx context.Context, in *CreateEstimateRequest, opts ...grpc.CallOption) (*CreateEstimateReply, error)
	DeleteEstimate(ctx context.Context, in *DeleteEstimateRequest, opts ...grpc.CallOption) (*DeleteEstimateReply, error)
	GetEstimate(ctx context.Context, in *GetEstimateRequest, opts ...grpc.CallOption) (*GetEstimateReply, error)
	ListDrugEstimate(ctx context.Context, in *ListDrugEstimateRequest, opts ...grpc.CallOption) (*ListDrugEstimateReply, error)
}

type estimateClient struct {
	cc grpc.ClientConnInterface
}

func NewEstimateClient(cc grpc.ClientConnInterface) EstimateClient {
	return &estimateClient{cc}
}

func (c *estimateClient) CreateEstimate(ctx context.Context, in *CreateEstimateRequest, opts ...grpc.CallOption) (*CreateEstimateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEstimateReply)
	err := c.cc.Invoke(ctx, Estimate_CreateEstimate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateClient) DeleteEstimate(ctx context.Context, in *DeleteEstimateRequest, opts ...grpc.CallOption) (*DeleteEstimateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEstimateReply)
	err := c.cc.Invoke(ctx, Estimate_DeleteEstimate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateClient) GetEstimate(ctx context.Context, in *GetEstimateRequest, opts ...grpc.CallOption) (*GetEstimateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEstimateReply)
	err := c.cc.Invoke(ctx, Estimate_GetEstimate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *estimateClient) ListDrugEstimate(ctx context.Context, in *ListDrugEstimateRequest, opts ...grpc.CallOption) (*ListDrugEstimateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDrugEstimateReply)
	err := c.cc.Invoke(ctx, Estimate_ListDrugEstimate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstimateServer is the server API for Estimate service.
// All implementations must embed UnimplementedEstimateServer
// for forward compatibility.
type EstimateServer interface {
	CreateEstimate(context.Context, *CreateEstimateRequest) (*CreateEstimateReply, error)
	DeleteEstimate(context.Context, *DeleteEstimateRequest) (*DeleteEstimateReply, error)
	GetEstimate(context.Context, *GetEstimateRequest) (*GetEstimateReply, error)
	ListDrugEstimate(context.Context, *ListDrugEstimateRequest) (*ListDrugEstimateReply, error)
	mustEmbedUnimplementedEstimateServer()
}

// UnimplementedEstimateServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEstimateServer struct{}

func (UnimplementedEstimateServer) CreateEstimate(context.Context, *CreateEstimateRequest) (*CreateEstimateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEstimate not implemented")
}
func (UnimplementedEstimateServer) DeleteEstimate(context.Context, *DeleteEstimateRequest) (*DeleteEstimateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEstimate not implemented")
}
func (UnimplementedEstimateServer) GetEstimate(context.Context, *GetEstimateRequest) (*GetEstimateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstimate not implemented")
}
func (UnimplementedEstimateServer) ListDrugEstimate(context.Context, *ListDrugEstimateRequest) (*ListDrugEstimateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrugEstimate not implemented")
}
func (UnimplementedEstimateServer) mustEmbedUnimplementedEstimateServer() {}
func (UnimplementedEstimateServer) testEmbeddedByValue()                  {}

// UnsafeEstimateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstimateServer will
// result in compilation errors.
type UnsafeEstimateServer interface {
	mustEmbedUnimplementedEstimateServer()
}

func RegisterEstimateServer(s grpc.ServiceRegistrar, srv EstimateServer) {
	// If the following call pancis, it indicates UnimplementedEstimateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Estimate_ServiceDesc, srv)
}

func _Estimate_CreateEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateServer).CreateEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Estimate_CreateEstimate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateServer).CreateEstimate(ctx, req.(*CreateEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Estimate_DeleteEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateServer).DeleteEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Estimate_DeleteEstimate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateServer).DeleteEstimate(ctx, req.(*DeleteEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Estimate_GetEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateServer).GetEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Estimate_GetEstimate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateServer).GetEstimate(ctx, req.(*GetEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Estimate_ListDrugEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDrugEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstimateServer).ListDrugEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Estimate_ListDrugEstimate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstimateServer).ListDrugEstimate(ctx, req.(*ListDrugEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Estimate_ServiceDesc is the grpc.ServiceDesc for Estimate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Estimate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Estimate",
	HandlerType: (*EstimateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEstimate",
			Handler:    _Estimate_CreateEstimate_Handler,
		},
		{
			MethodName: "DeleteEstimate",
			Handler:    _Estimate_DeleteEstimate_Handler,
		},
		{
			MethodName: "GetEstimate",
			Handler:    _Estimate_GetEstimate_Handler,
		},
		{
			MethodName: "ListDrugEstimate",
			Handler:    _Estimate_ListDrugEstimate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "estimate/v1/estimate.proto",
}
