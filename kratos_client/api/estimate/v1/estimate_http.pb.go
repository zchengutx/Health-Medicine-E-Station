// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.1
// source: estimate/v1/estimate.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEstimateCreateEstimate = "/Estimate/CreateEstimate"
const OperationEstimateDeleteEstimate = "/Estimate/DeleteEstimate"
const OperationEstimateGetEstimate = "/Estimate/GetEstimate"
const OperationEstimateListDrugEstimate = "/Estimate/ListDrugEstimate"

type EstimateHTTPServer interface {
	CreateEstimate(context.Context, *CreateEstimateRequest) (*CreateEstimateReply, error)
	DeleteEstimate(context.Context, *DeleteEstimateRequest) (*DeleteEstimateReply, error)
	GetEstimate(context.Context, *GetEstimateRequest) (*GetEstimateReply, error)
	ListDrugEstimate(context.Context, *ListDrugEstimateRequest) (*ListDrugEstimateReply, error)
}

func RegisterEstimateHTTPServer(s *http.Server, srv EstimateHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/create/estimate", _Estimate_CreateEstimate0_HTTP_Handler(srv))
	r.POST("/v1/delete/estimate", _Estimate_DeleteEstimate0_HTTP_Handler(srv))
	r.POST("/v1/get/estimate", _Estimate_GetEstimate0_HTTP_Handler(srv))
	r.POST("/v1/list/estimate", _Estimate_ListDrugEstimate0_HTTP_Handler(srv))
}

func _Estimate_CreateEstimate0_HTTP_Handler(srv EstimateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateEstimateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEstimateCreateEstimate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateEstimate(ctx, req.(*CreateEstimateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateEstimateReply)
		return ctx.Result(200, reply)
	}
}

func _Estimate_DeleteEstimate0_HTTP_Handler(srv EstimateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteEstimateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEstimateDeleteEstimate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteEstimate(ctx, req.(*DeleteEstimateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteEstimateReply)
		return ctx.Result(200, reply)
	}
}

func _Estimate_GetEstimate0_HTTP_Handler(srv EstimateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEstimateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEstimateGetEstimate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetEstimate(ctx, req.(*GetEstimateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetEstimateReply)
		return ctx.Result(200, reply)
	}
}

func _Estimate_ListDrugEstimate0_HTTP_Handler(srv EstimateHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDrugEstimateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEstimateListDrugEstimate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDrugEstimate(ctx, req.(*ListDrugEstimateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDrugEstimateReply)
		return ctx.Result(200, reply)
	}
}

type EstimateHTTPClient interface {
	CreateEstimate(ctx context.Context, req *CreateEstimateRequest, opts ...http.CallOption) (rsp *CreateEstimateReply, err error)
	DeleteEstimate(ctx context.Context, req *DeleteEstimateRequest, opts ...http.CallOption) (rsp *DeleteEstimateReply, err error)
	GetEstimate(ctx context.Context, req *GetEstimateRequest, opts ...http.CallOption) (rsp *GetEstimateReply, err error)
	ListDrugEstimate(ctx context.Context, req *ListDrugEstimateRequest, opts ...http.CallOption) (rsp *ListDrugEstimateReply, err error)
}

type EstimateHTTPClientImpl struct {
	cc *http.Client
}

func NewEstimateHTTPClient(client *http.Client) EstimateHTTPClient {
	return &EstimateHTTPClientImpl{client}
}

func (c *EstimateHTTPClientImpl) CreateEstimate(ctx context.Context, in *CreateEstimateRequest, opts ...http.CallOption) (*CreateEstimateReply, error) {
	var out CreateEstimateReply
	pattern := "/v1/create/estimate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEstimateCreateEstimate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EstimateHTTPClientImpl) DeleteEstimate(ctx context.Context, in *DeleteEstimateRequest, opts ...http.CallOption) (*DeleteEstimateReply, error) {
	var out DeleteEstimateReply
	pattern := "/v1/delete/estimate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEstimateDeleteEstimate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EstimateHTTPClientImpl) GetEstimate(ctx context.Context, in *GetEstimateRequest, opts ...http.CallOption) (*GetEstimateReply, error) {
	var out GetEstimateReply
	pattern := "/v1/get/estimate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEstimateGetEstimate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *EstimateHTTPClientImpl) ListDrugEstimate(ctx context.Context, in *ListDrugEstimateRequest, opts ...http.CallOption) (*ListDrugEstimateReply, error) {
	var out ListDrugEstimateReply
	pattern := "/v1/list/estimate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEstimateListDrugEstimate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
