// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.19.4
// source: order/v1/order.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrderServiceCreateOrder = "/api.order.v1.OrderService/CreateOrder"
const OperationOrderServiceGetOrder = "/api.order.v1.OrderService/GetOrder"
const OperationOrderServiceListUserOrders = "/api.order.v1.OrderService/ListUserOrders"
const OperationOrderServiceProcessPayment = "/api.order.v1.OrderService/ProcessPayment"

type OrderServiceHTTPServer interface {
	// CreateOrder 创建订单
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderReply, error)
	// GetOrder 获取订单详情
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderReply, error)
	// ListUserOrders 获取用户订单列表
	ListUserOrders(context.Context, *ListUserOrdersRequest) (*ListUserOrdersReply, error)
	// ProcessPayment 处理支付
	ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentReply, error)
}

func RegisterOrderServiceHTTPServer(s *http.Server, srv OrderServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/orders", _OrderService_CreateOrder0_HTTP_Handler(srv))
	r.GET("/api/v1/orders/{order_no}", _OrderService_GetOrder0_HTTP_Handler(srv))
	r.GET("/api/v1/users/{user_id}/orders", _OrderService_ListUserOrders0_HTTP_Handler(srv))
	r.POST("/api/v1/orders/{order_no}/payment", _OrderService_ProcessPayment0_HTTP_Handler(srv))
}

func _OrderService_CreateOrder0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceCreateOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrder(ctx, req.(*CreateOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrderReply)
		return ctx.Result(200, reply)
	}
}

func _OrderService_GetOrder0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceGetOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrder(ctx, req.(*GetOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOrderReply)
		return ctx.Result(200, reply)
	}
}

func _OrderService_ListUserOrders0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserOrdersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceListUserOrders)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUserOrders(ctx, req.(*ListUserOrdersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserOrdersReply)
		return ctx.Result(200, reply)
	}
}

func _OrderService_ProcessPayment0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProcessPaymentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceProcessPayment)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ProcessPayment(ctx, req.(*ProcessPaymentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProcessPaymentReply)
		return ctx.Result(200, reply)
	}
}

type OrderServiceHTTPClient interface {
	CreateOrder(ctx context.Context, req *CreateOrderRequest, opts ...http.CallOption) (rsp *CreateOrderReply, err error)
	GetOrder(ctx context.Context, req *GetOrderRequest, opts ...http.CallOption) (rsp *GetOrderReply, err error)
	ListUserOrders(ctx context.Context, req *ListUserOrdersRequest, opts ...http.CallOption) (rsp *ListUserOrdersReply, err error)
	ProcessPayment(ctx context.Context, req *ProcessPaymentRequest, opts ...http.CallOption) (rsp *ProcessPaymentReply, err error)
}

type OrderServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewOrderServiceHTTPClient(client *http.Client) OrderServiceHTTPClient {
	return &OrderServiceHTTPClientImpl{client}
}

func (c *OrderServiceHTTPClientImpl) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...http.CallOption) (*CreateOrderReply, error) {
	var out CreateOrderReply
	pattern := "/api/v1/orders"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderServiceCreateOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderServiceHTTPClientImpl) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...http.CallOption) (*GetOrderReply, error) {
	var out GetOrderReply
	pattern := "/api/v1/orders/{order_no}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderServiceGetOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderServiceHTTPClientImpl) ListUserOrders(ctx context.Context, in *ListUserOrdersRequest, opts ...http.CallOption) (*ListUserOrdersReply, error) {
	var out ListUserOrdersReply
	pattern := "/api/v1/users/{user_id}/orders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrderServiceListUserOrders))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderServiceHTTPClientImpl) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...http.CallOption) (*ProcessPaymentReply, error) {
	var out ProcessPaymentReply
	pattern := "/api/v1/orders/{order_no}/payment"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderServiceProcessPayment))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
